/*

Copyright (c) 2000-2023 Board of Trustees of Leland Stanford Jr. University,
all rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
STANFORD UNIVERSITY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of Stanford University shall not
be used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from Stanford University.

*/

package org.lockss.util;

import java.io.*;
import java.util.function.Consumer;
import java.security.KeyStore;

import org.lockss.util.*;
import org.lockss.test.*;
import org.lockss.plugin.*;

/**
 * Test class for <code>org.lockss.util.JarValidator</code>.
 */
public class TestJarValidator extends LockssTestCase {
  private Logger log = Logger.getLogger("TestJarValidator");

  private static final String password = "f00bar";

  private static final String jarDir = "org/lockss/test/plugins/";

  private String pubKeystoreName = "/org/lockss/test/public.keystore";
  private KeyStore m_pubKeystore;

  Consumer<JarValidator> CHECK_ALL = (x -> x.checkAllEntries(true));
  Consumer<JarValidator> CHECK_MANIFEST = (x -> x.checkAllEntries(false));
  Consumer<JarValidator> ALLOW_EXPIRED = (x -> x.allowExpired(true));
  Consumer<JarValidator> DISALLOW_EXPIRED = (x -> x.allowExpired(false));

  private KeyStore getKeystoreResource(String name, String pass)
      throws Exception {
    KeyStore ks = KeyStore.getInstance("JKS", "SUN");
    ks.load(getResourceAsStream(name), pass.toCharArray());
    return ks;
  }

  public void setUp() throws Exception {
    m_pubKeystore = getKeystoreResource(pubKeystoreName, password);
  }

  // Path to test plugins generated by gentestplugins
  private String plugPath(String plugName) {
    return jarDir + plugName;
  }

  private String jarName(String plugJar) {
    return new File(plugJar).getName();
  }

  // A good plugin CU
  private CachedUrl goodCu() {
    return new MockCachedUrl("http://foo.com/good.jar",
                             plugPath("good-xml.jar"), true);
  }

  public void assertValidate(String plugJar) throws Exception {
    assertValidate(plugJar, null);
  }

  public void assertValidate(String plugJar, Consumer<JarValidator> c)
      throws Exception {
    File plugDir = getTempDir();
    MockCachedUrl cu =
      new MockCachedUrl("http://foo.com/" + jarName(plugJar), plugJar, true);
    JarValidator validator = new JarValidator(m_pubKeystore, plugDir);
    if (c != null) {
      c.accept(validator);
    }
    File f = validator.getBlessedJar(cu);
    assertNotNull(f);
    assertTrue(f.exists());
  }

  void assertNoValidate(String plugJar) throws Exception {
    assertNoValidate(plugJar, null);
  }

  void assertNoValidate(String plugJar, Consumer<JarValidator> c)
      throws Exception {
    assertNoValidate(plugJar, c, null);
  }

  void assertNoValidate(String plugJar, Consumer<JarValidator> c, String expRE)
      throws Exception {
    File plugDir = getTempDir();
    MockCachedUrl cu =
      new MockCachedUrl("http://foo.com/" + jarName(plugJar), plugJar, true);
    JarValidator validator = new JarValidator(m_pubKeystore, plugDir);
    if (c != null) {
      c.accept(validator);
    }
    try {
      validator.getBlessedJar(cu);
      fail(jarName(plugJar) + " should have thrown JarValidationException.");
    } catch (JarValidator.JarValidationException e) {
      log.debug("Expected validation failure", e);
      if (expRE != null) {
        assertMatchesRE(expRE, e.getMessage());
      }
    }
  }

  // Test jars with valid signatures
  public void testGood() throws Exception {
    // XML plugin
    assertValidate(plugPath("good-xml.jar"));
    // XML plugin with aux class
    assertValidate(plugPath("good-aux.jar"));
    // Java plugin
    assertValidate(plugPath("good-java.jar"));
  }
  
  // Test expired sig, allowed and disallowed
  public void testExpired1() throws Exception {
    assertValidate(plugPath("expired-sig.jar"));
    assertValidate(plugPath("expired-sig.jar"), ALLOW_EXPIRED);
    assertNoValidate(plugPath("expired-sig.jar"), DISALLOW_EXPIRED, "is no longer valid");
  }

  // Test not-yet valid sig.  Always disallowed
  public void testFuture1() throws Exception {
    assertNoValidate(plugPath("future-sig.jar"));
    assertNoValidate(plugPath("future-sig.jar"), ALLOW_EXPIRED);
    assertNoValidate(plugPath("future-sig.jar"), DISALLOW_EXPIRED);
  }

  // Test some invalid plugin jars
  public void testInvalid() throws Exception {
    // Signature not in public keystore
    assertNoValidate(plugPath("unknown-sig.jar"));
    assertNoValidate(plugPath("wrong-sig.jar"));
    assertNoValidate(plugPath("tampered1.jar"));
    assertNoValidate(plugPath("nomanifest.jar"));
    assertNoValidate(plugPath("unsigned.jar"));
    assertNoValidate(plugPath("partially-signed.jar"));

    assertNoValidate(plugPath("unknown-sig.jar"), CHECK_ALL);
    assertNoValidate(plugPath("wrong-sig.jar"), CHECK_ALL);
    assertNoValidate(plugPath("tampered1.jar"), CHECK_ALL);
    assertNoValidate(plugPath("nomanifest.jar"), CHECK_ALL);
    assertNoValidate(plugPath("unsigned.jar"), CHECK_ALL);
    assertNoValidate(plugPath("partially-signed.jar"), CHECK_ALL);

    assertNoValidate(plugPath("unknown-sig.jar"), CHECK_MANIFEST);
    assertNoValidate(plugPath("wrong-sig.jar"), CHECK_MANIFEST);
    assertNoValidate(plugPath("tampered1.jar"), CHECK_MANIFEST);
    assertNoValidate(plugPath("unsigned.jar"), CHECK_ALL);
    assertNoValidate(plugPath("nomanifest.jar"), CHECK_MANIFEST);
    assertValidate(plugPath("partially-signed.jar"), CHECK_MANIFEST);
  }

  public void testNullCu() throws Exception {
    // JarValidator with null plugin dir
    JarValidator validator = new JarValidator(m_pubKeystore, getTempDir());
    try {
      validator.getBlessedJar(null);
    } catch (IllegalArgumentException e) {
      log.debug("Expected validation failure", e);
      assertMatchesRE("CU is null", e.getMessage());
    }
  }

  public void testNoPluginDir() throws Exception {
    // JarValidator with null plugin dir
    JarValidator validator = new JarValidator(m_pubKeystore, null);
    try {
      validator.getBlessedJar(goodCu());
    } catch (IllegalArgumentException e) {
      log.debug("Expected validation failure", e);
      assertMatchesRE("No plugin directory", e.getMessage());
    }
  }

  public void testNullKeystore() throws Exception {
    // JarValidator with null keystore
    JarValidator validator = new JarValidator(null, getTempDir());
    try {
      validator.getBlessedJar(goodCu());
      fail("No keystore - should have thrown JarValidationException.");
    } catch (JarValidator.JarValidationException e) {
      log.debug("Expected validation failure", e);
      assertMatchesRE("No keystore", e.getMessage());
    }
  }

  public void testNonExistentPlugInDir() throws Exception {
    JarValidator validator = new JarValidator(m_pubKeystore,
                                              new File("/no/such/dir/"));
    try {
      validator.getBlessedJar(goodCu());
      
      fail("non-existent plugins dir should cause validation failure");
    } catch (Exception e) {
      log.debug("Expected validation failure", e);
      assertMatchesRE("No such file or dir", e.getMessage());
    }    
  }
  
  public void testPlugInDirIsFile() throws Exception {
    JarValidator validator = new JarValidator(m_pubKeystore,
                                              getTempFile("plugdirfile", null));
    try {
      validator.getBlessedJar(goodCu());
      fail("regular file plugins dir should cause validation failure");
    } catch (Exception e) {
      log.debug("Expected validation failure", e);
      assertMatchesRE("Not a directory", e.getMessage());
    }
  }
  
  public void testCUNotJar() throws Exception {
    File f = FileTestUtil.writeTempFile("notjar", ".jar", "these are the contents that pry men's soles");
    MockCachedUrl cu =
      new MockCachedUrl("http://foo.com/NonJar.jar", f.toString(), false);
    JarValidator validator = new JarValidator(m_pubKeystore, getTempDir());
    try {
      validator.getBlessedJar(cu);
      fail("testCUNotJar: A CU that's not a jar should cause validation failure");
    } catch (Exception e) {
      log.debug("Expected validation failure", e);
      assertMatchesRE("No manifest", e.getMessage());
    }
  }
}
