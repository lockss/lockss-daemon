#!/bin/sh
# do not edit the line above, or edit the parts of this file outside
# Funky-EOF without making sure that it works with /bin/sh on Solaris.
# After any change to this file it must be tested on Linux and Solaris.
PATH=/sbin:/usr/sbin:$PATH
BASH_NAME=bash
BASH=`which ${BASH_NAME} 2>/dev/null`
if [ "X${BASH}" = "X" ]
then
    for A in /bin /usr/bin /usr/gnu/bin /usr/local/bin
    do
        if [ -f $A/${BASH_NAME} -a -x $A/${BASH_NAME} ]
        then
            BASH=$A/$BASH_NAME
            break
        fi
    done
fi
if [ "X${BASH}" = "X" ]
then
    while true
    do
        echo "This script needs the \"${BASH_NAME}\" shell - please enter its path."
        read A
        if [ -f "${A}" -a -x "${A}" ]
        then
            BASH="${A}"
            break
        fi
        echo "${A} not executable"
    done
fi
SCRIPT=`mktemp /tmp/hostconfig.XXXXX`
cat >${SCRIPT} <<'Funky-EOF'
#
# Query user and write local LOCKSS config values to /etc/lockss/config.dat
# Must be run before LOCKSS daemon can be started
#

ask_for_input() {
    echo -n "$1: [$2] "
    read ANS
    if [ "X${ANS}" = "X" ]
    then
        ANS=$2
    fi
}

ask_for_input_shadow() {
    echo -n "$1: [$2] "
    local STTY_ORIG=`stty -g`
    stty -echo
    read ANS
    stty "$STTY_ORIG"
    echo
    if [ "X${ANS}" = "X" ]
    then
        ANS=$2
    fi
}

is_yes() {
    local WORD="$1"
    if [ "X${WORD}" = Xy -o "X${WORD}" = XY ]; then
        return 0
    else
        return 1
    fi
}

parse_ip_address() {
    local INP=$1
    local OLD_IFS="${IFS}"
    IFS="."
    local COUNT=0
    local GOODCOUNT=0
    local IPADDR=0
    for A in ${INP}; do
      if  ( expr ${A} + 1 >/dev/null 2>&1 ); then
          if [ ${A} -ge 0 -a ${A} -lt 256 ]; then
              GOODCOUNT=`expr ${GOODCOUNT} + 1`
              IPADDR=`expr ${IPADDR} \* 256 + ${A}`
          fi
      fi
      COUNT=`expr ${COUNT} + 1`
    done
    IFS="${OLD_IFS}"
    if [ ${COUNT} != 4 -o ${GOODCOUNT} != 4 ]; then
        echo 0
    else
        echo ${IPADDR}
    fi
}

valid_ip_address() {
    local IPADDR=`parse_ip_address "$1"`
    if [ ${IPADDR} -eq 0 ]; then
        return 1
    else
        return 0
    fi
}

valid_subnet() {
    local INP=$1
    if ! echo ${INP} | grep -s '/' >/dev/null; then
        oct='[0-9]{1,3}'
        if echo $1 | egrep -s "^(($oct\.$oct\.$oct\.\*)|($oct\.$oct\.\*.\*)|($oct\.\*.\*.\*))$" >/dev/null; then
            return 0
        fi
        return 1
    fi
    local NET=`echo ${INP} | sed 's/\/.*//'`
    local MASK=`echo ${INP} | sed 's/.*\///'`
    local NETADDR=`parse_ip_address "${NET}"`
    if [ ${NETADDR} -eq 0 ]; then
        return 1
    fi
    if echo ${MASK} | grep -s '\.' >/dev/null; then
        local MASKADDR=`parse_ip_address "${MASK}"`
        if [ ${MASKADDR} -eq 0 ]; then
            return 1
        fi
        # should check that (${MASKADDR}|(-${MASKADDR})) == ${MASKADDR}
        return 0;
    else
        if ! expr ${MASK} + 1 >/dev/null 2>&1; then
            return 1
        fi
        if [ ${MASK} -lt 0 -o ${MASK} -gt 32 ]; then
            return 1
        fi
        # should check legal cidr
        return 0;
    fi
}

read_config() {
    local FILE="$1"
    local OLD_IFS="${IFS}"
    IFS='
'
    for A in `sed -e '/[a-zA-Z0-9_]* *= *.*/!d' -e 's/\([a-zA-Z0-9_]*\) *= *\(.*\)/\
\1=\2/' $1` ; do
        eval "$A"
    done
    IFS="${OLD_IFS}"
}

assign_first_element() {
    local WORDS="$1"
    local IFS=";"
    FIRST=""
    for WORD in ${WORDS}; do
        FIRST="${WORD}"
        break
    done
}

# init_cache_dirs dirs user mode
# NB dirs is a semi-colon-separated list
init_cache_dirs() {
    local DIRS="$1"
    local OLD_IFS=${IFS}
    IFS=";"
    local DIR
    for DIR in ${DIRS}; do
        IFS="${OLD_IFS}"
        init_one_dir "${DIR}" $2 750
        IFS=";"
    done
    IFS="${OLD_IFS}"
}

# check_writable dir user
check_writable() {
    local DIR="$1"
    true&
    local PROBE_FILE=${DIR}/probe_$!
    case `uname -s ` in
    Linux)
        if [ "X${CONFIG_USER}" != "X${2}" ] ; then
            SUDO="sudo -u ${2}"
        else
            SUDO=""
        fi
        if ${SUDO} touch ${PROBE_FILE} >/dev/null 2>&1; then
            rm -f ${PROBE_FILE}
            return 0
        fi
        ;;
    SunOS)
        if [ "X${CONFIG_USER}" != "X${2}" ] ; then
            if su ${2} -c "touch ${PROBE_FILE} >/dev/null 2>&1"; then
                rm -f ${PROBE_FILE}
                return 0
            fi
        else
            if ${SU} "touch ${PROBE_FILE} >/dev/null 2>&1"; then
                rm -f ${PROBE_FILE}
                return 0
            fi
        fi
        ;;
    esac
    return 1
}

# init_one_dir dir user
init_one_dir() {
    local DIR="$1"
    local MODE="${3:-750}"
    if [ ! -d "${DIR}" ]; then
        ask_for_input "${DIR} does not exist; shall I create it" Y
        if is_yes "${ANS}"; then
            mkdir -p "${DIR}"
            if [ "X${CONFIG_USER}" != "X${2}" ] ; then
                chown ${2} "${DIR}"
            fi
            chmod "${MODE}" "${DIR}"
            if check_writable "${DIR}" ${2} ; then
                return 0
            else
                echo "${DIR} not writable by user ${2}"
                echo " Please make it so (check parent dir execute bits)"
                echo " LOCKSS will not run properly without it."
            fi
        else
            echo "Please create ${DIR} and make it writable by user ${2};"
            echo " LOCKSS will not run properly without it."
        fi
        return 0
    fi
    if check_writable "${DIR}" $2 ; then
        echo "${DIR} exists and is writable by ${2}"
    else
        ask_for_input "${DIR} is not writable; shall I chown it" Y
        if is_yes "${ANS}"; then
            chown ${2} "${DIR}"
            if check_writable "${DIR}" $2 ; then
                return 0
            else
                echo "${DIR} still not writable by user ${2}"
                echo " Please make it so (check parent dir execute bits)"
                echo " LOCKSS will not run properly without it."
            fi
        else
            echo "Please ensure that ${DIR} is writable by user ${2};"
            echo " LOCKSS will not run properly without it."
        fi
    fi
}

# build_config_file file user
build_config_file () {
    echo "Configuring for user ${2}"
    CONFIG_OK=N
    until is_yes ${CONFIG_OK}; do
        if [ "X${LOCKSS_HOSTNAME}" = X ]; then
            LOCKSS_HOSTNAME=${LOCAL_HOSTNAME}
        fi
        ask_for_input "Fully qualified hostname (FQDN) of this machine" "${LOCKSS_HOSTNAME}"
        LOCKSS_HOSTNAME=${ANS}
        if [ "X${LOCKSS_IPADDR}" = X ]; then
            LOCKSS_IPADDR=${LOCAL_IPADDR}
        fi
        IP_OK=N
        until is_yes ${IP_OK}; do
            ask_for_input "IP address of this machine" ${LOCKSS_IPADDR}
            if valid_ip_address "${ANS}"; then
                LOCKSS_IPADDR="${ANS}"
                IP_OK=Y
            fi
        done
        if [ "X${LOCKSS_ACCESS_SUBNET}" = X ]; then
            LOCKSS_ACCESS_SUBNET=`echo ${LOCKSS_IPADDR} | sed 's/\.[0-9][0-9]*$/.0\/24/'`
        fi
        NAT=N
        if [ "${LOCKSS_EXTERNAL_IPADDR}X" != X ]; then
            NAT=Y
        fi
        ask_for_input "Is this machine behind NAT?" ${NAT}
        if is_yes "${ANS}"; then
            EXT_OK=N
            until is_yes ${EXT_OK}; do
                ask_for_input "External IP address for NAT" ${LOCKSS_EXTERNAL_IPADDR}
                if valid_ip_address ${ANS}; then
                    LOCKSS_EXTERNAL_IPADDR=${ANS}
                    EXT_OK=Y
                fi
            done
        else
            unset LOCKSS_EXTERNAL_IPADDR
        fi
        SUBNET_OK=N
        until is_yes ${SUBNET_OK}; do
            ask_for_input "Initial subnet for admin UI access" ${LOCKSS_ACCESS_SUBNET}
            if valid_subnet "${ANS}"; then
                LOCKSS_ACCESS_SUBNET="${ANS}"
                SUBNET_OK=Y
            fi
        done
        if [ "X${LOCKSS_V3_PORT}" = X ]; then
            LOCKSS_V3_PORT=9729
        fi
        ask_for_input "LCAP V3 protocol port" ${LOCKSS_V3_PORT}
        if [ "X${ANS}" != "X" ]; then
            LOCKSS_V3_PORT="${ANS}"
        fi
        if [ "X${LOCKSS_PROXY_PORT}" = X ]; then
            LOCKSS_PROXY_PORT=8080
        fi
        ask_for_input "PROXY port" ${LOCKSS_PROXY_PORT}
        if [ "X${ANS}" != "X" ]; then
            LOCKSS_PROXY_PORT="${ANS}"
        fi
        if [ "X${LOCKSS_UI_PORT}" = X ]; then
            LOCKSS_UI_PORT=8081
        fi
        ask_for_input "Admin UI port" ${LOCKSS_UI_PORT}
        if [ "X${ANS}" != "X" ]; then
            LOCKSS_UI_PORT="${ANS}"
        fi
        if [ "X${LOCKSS_MAILHUB}" = X ]; then
            LOCKSS_MAILHUB=localhost
        fi
        ask_for_input "Mail relay for this machine" ${LOCKSS_MAILHUB}
        LOCKSS_MAILHUB="${ANS}"
        NEED_USER=N
        if [ "X${LOCKSS_MAILHUB_USER}" != X ] ; then
            NEED_USER=Y
        fi
        ask_for_input "Does mail relay ${LOCKSS_MAILHUB} need user & password" ${NEED_USER}
        if is_yes "${ANS}" ; then
            ask_for_input "User for ${LOCKSS_MAILHUB}" ${LOCKSS_MAILHUB_USER}
            LOCKSS_MAILHUB_USER="${ANS}"
            MAILHUB_PASSWORD=
            while [ "X${MAILHUB_PASSWORD}" = X ] ; do
                ask_for_input_shadow "Password for ${LOCKSS_MAILHUB_USER}@${LOCKSS_MAILHUB}" ""
                P1=${ANS}
                ask_for_input_shadow "Again" ""
                if [ "X${ANS}" = "X${P1}" ] ; then
                    MAILHUB_PASSWORD="${ANS}"
                fi
            done
            LOCKSS_MAILHUB_PASSWORD="\"${MAILHUB_PASSWORD}\""
        fi
        EMAIL_OK=N
        until is_yes ${EMAIL_OK}; do
            ask_for_input "E-mail address for administrator" ${LOCKSS_EMAIL}
            if [ "X${ANS}" != X ]; then
                LOCKSS_EMAIL="${ANS}"
                EMAIL_OK=Y
            fi
        done
        if [ "X${LOCKSS_JAVA_CMD}" = X ]; then
            LOCKSS_JAVA_CMD=`which java 2>/dev/null`
        fi
        JAVA_OK=N
        while [ "X${JAVA_OK}" != XY ]
        do
            ask_for_input "Path to java" ${LOCKSS_JAVA_CMD}
            if [ -x ${ANS} ] ; then
                JAVA_VERSION=`${ANS} -version 2>&1 | head -1 | sed -e 's/.* "\(.*\)"/\1/
    '`
                case "X${JAVA_VERSION}" in
                X1.[6789]*)
                    JAVA_OK=Y
                    ;;
                *)
                    echo "Java version is ${JAVA_VERSION}: 1.6 or higher required"
                    ;;
                esac
            else
                echo "${ANS} not executable"
            fi
        done
        LOCKSS_JAVA_CMD="${ANS}"
        ask_for_input "Java switches" ${LOCKSS_JAVA_SWITCHES}
        LOCKSS_JAVA_SWITCHES="${ANS}"
        if [ "X${LOCKSS_PROPS_URL}" = X ]; then
            LOCKSS_PROPS_URL="http://props.lockss.org:8001/daemon/lockss.xml"
        fi
        ask_for_input "Configuration URL" ${LOCKSS_PROPS_URL}
        LOCKSS_PROPS_URL="${ANS}"

        if echo ${LOCKSS_PROPS_URL} | egrep -is "^https:" >/dev/null; then
	    if [ "X${LOCKSS_PROPS_AUTHENTICATE_SERVER}" = X ]; then
		LOCKSS_PROPS_AUTHENTICATE_SERVER="Y"
            fi
            ask_for_input "Verify configuration server authenticity?" ${LOCKSS_PROPS_AUTHENTICATE_SERVER}
	    if is_yes "${ANS}" ; then
		if [ "X${LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE}" = X ]; then
		    LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE="lockss-ca"
		fi
		ask_for_input "Server certificate keystore" ${LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE}
		LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE="${ANS}"
	    else
		unset LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE
	    fi
	fi

        if [ "X${LOCKSS_PROPS_PROXY}" = X ]; then
            LOCKSS_PROPS_PROXY="NONE"
        fi
        ask_for_input "Configuration proxy (host:port)" ${LOCKSS_PROPS_PROXY}
        LOCKSS_PROPS_PROXY="${ANS}"

        if [ "X${LOCKSS_CONFIG_FAILOVER_ENABLE}" = X ]; then
          LOCKSS_CONFIG_FAILOVER_ENABLE=Y
        fi
        ask_for_input "Enable config failover" "${LOCKSS_CONFIG_FAILOVER_ENABLE}"
        if is_yes "${ANS}" ; then
            LOCKSS_CONFIG_FAILOVER_ENABLE="Y"
            ask_for_input "Config failover max age" "${LOCKSS_CONFIG_FAILOVER_MAX_AGE}"
            LOCKSS_CONFIG_FAILOVER_MAX_AGE="${ANS}"
        else
            LOCKSS_CONFIG_FAILOVER_ENABLE="N"
        fi

        if [ "X${LOCKSS_TEST_GROUP}" = X ]; then
            LOCKSS_TEST_GROUP="prod"
        fi
        ask_for_input "Preservation group(s)" "${LOCKSS_TEST_GROUP}"
        LOCKSS_TEST_GROUP="${ANS}"
        DISK_PATHS_OK=N
        until is_yes ${DISK_PATHS_OK}; do
            ask_for_input "Content storage directories" ${LOCKSS_DISK_PATHS}
            if [ "X${ANS}" != X ]; then
                LOCKSS_DISK_PATHS="${ANS}"
                DISK_PATHS_OK=Y
            fi
        done
        if [ "X${LOCKSS_TMPDIR}" = X ]; then
            assign_first_element ${LOCKSS_DISK_PATHS}
            FIRST=`echo ${FIRST} | sed 's^/$^^'`
            LOCKSS_TMPDIR=${FIRST}/tmp
        fi
        ask_for_input "Temporary storage directory" ${LOCKSS_TMPDIR}
        LOCKSS_TMPDIR="${ANS}"
        USER_OK=N
        until is_yes ${USER_OK}; do
            ask_for_input "User name for web UI administration" "${LOCKSS_ADMIN_USER}"
            if [ "X${ANS}" != X ]; then
                LOCKSS_ADMIN_USER="${ANS}"
                USER_OK=Y
            fi
        done
        LOCKSS_ADMIN_PASSWD=""
        while [ "X${LOCKSS_ADMIN_PASSWD}" = X ]; do
            P1=
            while [ "X${P1}" = X ]; do
                ask_for_input_shadow "Password for web UI administration user ${LOCKSS_ADMIN_USER}" ""
                P1="${ANS}"
            done
            ask_for_input_shadow "Password for web UI administration (again)" ""
            if [ "X${ANS}" = "X${P1}" ]; then
                SHA256=`echo -n "${P1}" | ${SHA256SUM}`
                SHA256=`echo ${SHA256} | sed 's/ .*$//'`
                LOCKSS_ADMIN_PASSWD="SHA-256:${SHA256}"
            fi
        done
        TMP_CONFIG=/tmp/lockss.dat$$
        # LOCKSS_CONFIG_VERSION must be incremented when the set or usage
        # of variables stored in the config file changes in a way that
        # requires hostconfig to be rerun.  Not required if just adding a
        # new variable that defaults to empty
        export LOCKSS_CONFIG_VERSION=1
        cat >${TMP_CONFIG} <<EOF
LOCKSS_CONFIG_VERSION=${LOCKSS_CONFIG_VERSION}
LOCKSS_USER="${2}"
LOCKSS_HOSTNAME=${LOCKSS_HOSTNAME}
LOCKSS_IPADDR=${LOCKSS_IPADDR}
LOCKSS_EXTERNAL_IPADDR=${LOCKSS_EXTERNAL_IPADDR}
LOCKSS_V3_PORT=${LOCKSS_V3_PORT}
LOCKSS_ACCESS_SUBNET="${LOCKSS_ACCESS_SUBNET}"
LOCKSS_MAILHUB=${LOCKSS_MAILHUB}
LOCKSS_MAILHUB_USER=${LOCKSS_MAILHUB_USER}
LOCKSS_MAILHUB_PASSWORD=${LOCKSS_MAILHUB_PASSWORD}
LOCKSS_EMAIL=${LOCKSS_EMAIL}
LOCKSS_JAVA_CMD=${LOCKSS_JAVA_CMD}
LOCKSS_JAVA_SWITCHES=${LOCKSS_JAVA_SWITCHES}
LOCKSS_JAVA_HEAP=${LOCKSS_JAVA_HEAP}
LOCKSS_PROPS_URL="${LOCKSS_PROPS_URL}"
LOCKSS_PROPS_PROXY="${LOCKSS_PROPS_PROXY}"
LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE="${LOCKSS_PROPS_SERVER_AUTHENTICATE_KEYSTORE}"
LOCKSS_CONFIG_FAILOVER_ENABLE="${LOCKSS_CONFIG_FAILOVER_ENABLE}"
LOCKSS_CONFIG_FAILOVER_MAX_AGE="${LOCKSS_CONFIG_FAILOVER_MAX_AGE}"
LOCKSS_TEST_GROUP="${LOCKSS_TEST_GROUP}"
LOCKSS_DISK_PATHS="${LOCKSS_DISK_PATHS}"
LOCKSS_ADMIN_USER=${LOCKSS_ADMIN_USER}
LOCKSS_ADMIN_PASSWD=${LOCKSS_ADMIN_PASSWD}
LOCKSS_PROXY_PORT=${LOCKSS_PROXY_PORT}
LOCKSS_UI_PORT=${LOCKSS_UI_PORT}
LOCKSS_TMPDIR=${LOCKSS_TMPDIR}
LOCKSS_CLEAR_TMPDIR=${LOCKSS_CLEAR_TMPDIR:-yes}
LOCKSS_RELEASE=@RELEASENAME@-@RPMRELEASE@
EOF
        echo
        echo "Configuration:"
        cat ${TMP_CONFIG}
        echo "LOCKSS_HOME is ${LOCKSS_HOME}"
        if [ "X${LOCKSS_HOME}" != X ]; then
            if [ ! -d ${LOCKSS_HOME} ]; then
                echo "No ${LOCKSS_HOME}"
                return
            fi
        fi
        ask_for_input "OK to store this configuration" Y
        if is_yes "${ANS}"; then
            if ! cp ${TMP_CONFIG} ${1}; then
                echo "Config not installed, left in ${TMP_CONFIG}"
                exit 1
            fi
            echo "Checking content storage dirs"
            if ! init_cache_dirs ${LOCKSS_DISK_PATHS} $2 ; then
                exit 1
            fi
            if [ ! -d ${LOCKSS_HOME}/var/run ] ; then
                init_one_dir ${LOCKSS_HOME}/var/run $2 750
            fi
            if [ "X${CONFIG_USER}" = Xroot -a ! -f ${LOCKSS_HOME}/var/run/lockss.pid ]; then
                touch ${LOCKSS_HOME}/var/run/lockss.pid
                chown ${2} ${LOCKSS_HOME}/var/run/lockss.pid
            fi
            if [ ! -d ${LOCKSS_HOME}/var/log/lockss ] ; then
                init_one_dir ${LOCKSS_HOME}/var/log/lockss $2 755
            fi
            if [ ! -d ${LOCKSS_TMPDIR} ] ; then
                init_one_dir ${LOCKSS_TMPDIR} $2 750
            fi
            echo Done
            case ${OS_TYPE} in
            SunOS)
		if [ -x /etc/init.d/lockss ] ; then
                    if [ ! -x /etc/rc3.d/S99lockss ] ; then
                        ln /etc/init.d/lockss /etc/rc3.d/S99lockss
                        for A in 0 1 2 S ; do
                            ln /etc/init.d/lockss /etc/rc${A}.d/K99lockss
                        done
                    fi
                    echo "LOCKSS will start automatically at next reboot, or you may"
                    echo " start it now by running   /etc/init.d/lockss start"

                fi
                ;;
            Linux)
                if [ -x /etc/init.d/lockss ]
                then
                    if [ ! -L /etc/rc3.d/S99lockss ]
                    then
                        chkconfig --add lockss
                    fi
                    echo "LOCKSS will start automatically at next reboot, or you may"
                    echo " start it now by running   /etc/init.d/lockss start"
                else
                    echo "Start LOCKSS by ${LOCKSS_HOME}/etc/init.d/lockss"
                fi
                ;;
            esac
            CONFIG_OK=Y
	    FILT_CONFIG=`mktemp /tmp/filtconfig.XXXXX`
	    egrep -sv 'PASSW(OR)?D.*=' <${1} >>${FILT_CONFIG}
            if ! mail -s "Config for ${2}@${LOCKSS_HOSTNAME}" ${LOCKSS_EMAIL} ${LOCKSS_TEAM} <${FILT_CONFIG} ; then
                echo "Sending mail failed. Please check mail configuration."
		UNSENT_FILE=/tmp/unsent-lockss-config
		cp ${FILT_CONFIG} ${UNSENT_FILE} 
                echo "Please also send ${UNSENT_FILE} to ${LOCKSS_TEAM}."
            fi
	    rm -f ${FILT_CONFIG}
        fi
    done
}

###
# Start
###
export LOCKSS_TEAM=lockssdiag@lockss.org
OS_TYPE=`uname -s`
case ${OS_TYPE} in
SunOS)
    LOCKSS_HOME=/opt/lockss
    PATH=/usr/ucb:/sbin:$PATH
    LOCAL_IPADDR=`ifconfig -a | grep 'inet ' | grep -v 127.0.0.1 | tail -1 | sed 's/.*inet \(.*\) netmask.*/\1/'`
    export SHA256SUM
    for A in sha256sum digest
    do
        WHICH=`which $A | sed "s/.*\///"`
        if [ "X${A}" = "X${WHICH}" ]
        then
            SHA256SUM=$A
            break
        fi
    done
    case "X${SHA256SUM}" in
    Xdigest)
        SHA256SUM="digest -a sha256"
        ;;
    X)
        echo "Can't find a SHA25656 command"
        exit
        ;;
    esac
    ;;
Linux)
    LOCKSS_HOME=
    SHA256SUM=sha256sum
    LOCAL_IPADDR=`ifconfig eth0 | grep 'inet addr:' | grep -v 127.0.0.1 | tail -1 | sed 's/.*inet addr:\(.*\)  Mask.*/\1/'`
    ;;
*)
    echo "${OS_TYPE} not supported"
    exit 1
    ;;
esac
LOCKSS_USER=lockss
LOCAL_HOSTNAME=`uname -n`
CONFIG_FILE=${LOCKSS_HOME}/etc/lockss/config.dat
echo "LOCKSS host configuration for ${OS_TYPE}."
echo "For more information see /etc/lockss/README"
USER_COUNT=1
if [ -r "${CONFIG_FILE}" ]; then
    echo "Setting defaults from existing config: ${CONFIG_FILE}"
    read_config ${CONFIG_FILE}
    if [ "${LOCKSS_USER}X" != X ] ; then
        USER_COUNT=`echo ${LOCKSS_USER} | wc -w`
    fi
fi
if [ ${USER_COUNT} -eq 1 ] ; then
    build_config_file ${CONFIG_FILE} ${LOCKSS_USER}
else
    for USER in ${LOCKSS_USER} ; do
        if [ -s ${LOCKSS_HOME}/etc/lockss/config.${USER}.dat ] ; then
            echo "Re-setting defaults from existing config for ${USER}"
            read_config ${LOCKSS_HOME}/etc/lockss/config.${USER}.dat
        fi
        build_config_file ${LOCKSS_HOME}/etc/lockss/config.${USER}.dat ${USER}
    done
fi
Funky-EOF
CONFIG_USER=`ls -l ${SCRIPT} | while read BITS N U FOO; do echo $U; done`
echo ${CONFIG_USER} is configuring
export CONFIG_USER
${BASH} ${SCRIPT}
rm ${SCRIPT}
