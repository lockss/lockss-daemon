/*
 * Copyright (c) 2000-2022, Board of Trustees of Leland Stanford Jr. University
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * LOCKSS Repository Service REST API
 * REST API of the LOCKSS Repository Service
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.lockss.laaws.client;

import java.util.List;
import java.util.Map;

/**
 * <p>ApiException class.</p>
 */
@SuppressWarnings("serial")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ApiException extends Exception {
  private int code = 0;
  private Map<String, List<String>> responseHeaders = null;
  private String responseBody = null;

  /**
   * <p>Constructor for ApiException.</p>
   */
  public ApiException() {}

  /**
   * <p>Constructor for ApiException.</p>
   *
   * @param throwable a {@link java.lang.Throwable} object
   */
  public ApiException(Throwable throwable) {
    super(throwable);
  }

  /**
   * <p>Constructor for ApiException.</p>
   *
   * @param message the error message
   */
  public ApiException(String message) {
    super(message);
  }

  /**
   * <p>Constructor for ApiException.</p>
   *
   * @param message the error message
   * @param throwable a {@link java.lang.Throwable} object
   * @param code HTTP status code
   * @param responseHeaders a {@link java.util.Map} of HTTP response headers
   * @param responseBody the response body
   */
  public ApiException(String message, Throwable throwable, int code,
      Map<String, List<String>> responseHeaders, String responseBody) {
    super(message, throwable);
    this.code = code;
    this.responseHeaders = responseHeaders;
    this.responseBody = responseBody;
  }

  /**
   * <p>Constructor for ApiException.</p>
   *
   * @param message the error message
   * @param code HTTP status code
   * @param responseHeaders a {@link java.util.Map} of HTTP response headers
   * @param responseBody the response body
   */
  public ApiException(
      String message, int code, Map<String, List<String>> responseHeaders, String responseBody) {
    this(message, (Throwable) null, code, responseHeaders, responseBody);
  }

  /**
   * <p>Constructor for ApiException.</p>
   *
   * @param message the error message
   * @param throwable a {@link java.lang.Throwable} object
   * @param code HTTP status code
   * @param responseHeaders a {@link java.util.Map} of HTTP response headers
   */
  public ApiException(
      String message, Throwable throwable, int code, Map<String, List<String>> responseHeaders) {
    this(message, throwable, code, responseHeaders, null);
  }

  /**
   * <p>Constructor for ApiException.</p>
   *
   * @param code HTTP status code
   * @param responseHeaders a {@link java.util.Map} of HTTP response headers
   * @param responseBody the response body
   */
  public ApiException(int code, Map<String, List<String>> responseHeaders, String responseBody) {
    this((String) null, (Throwable) null, code, responseHeaders, responseBody);
  }

  /**
   * <p>Constructor for ApiException.</p>
   *
   * @param code HTTP status code
   * @param message a {@link java.lang.String} object
   */
  public ApiException(int code, String message) {
    super(message);
    this.code = code;
  }

  /**
   * <p>Constructor for ApiException.</p>
   *
   * @param code HTTP status code
   * @param message the error message
   * @param responseHeaders a {@link java.util.Map} of HTTP response headers
   * @param responseBody the response body
   */
  public ApiException(
      int code, String message, Map<String, List<String>> responseHeaders, String responseBody) {
    this(code, message);
    this.responseHeaders = responseHeaders;
    this.responseBody = responseBody;
  }

  /**
   * Get the HTTP status code.
   *
   * @return HTTP status code
   */
  public int getCode() {
    return code;
  }

  /**
   * Get the HTTP response headers.
   *
   * @return A map of list of string
   */
  public Map<String, List<String>> getResponseHeaders() {
    return responseHeaders;
  }

  /**
   * Get the HTTP response body.
   *
   * @return Response body in the form of string
   */
  public String getResponseBody() {
    return responseBody;
  }

  /**
   * Get the exception message including HTTP response data.
   *
   * @return The exception message
   */
  public String getMessage() {
    return String.format(
        "Message: %s%nHTTP response code: %s%nHTTP response body: %s%nHTTP response headers: %s",
        super.getMessage(), this.getCode(), this.getResponseBody(), this.getResponseHeaders());
  }
}
