/*
 * 2022, Board of Trustees of Leland Stanford Jr. University,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * LOCKSS Repository Service REST API
 * REST API of the LOCKSS Repository Service
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.lockss.laaws.api.rs;

import com.google.gson.reflect.TypeToken;
import org.lockss.laaws.DigestCachedUrl;
import org.lockss.laaws.client.*;
import org.lockss.laaws.model.rs.Artifact;
import org.lockss.laaws.model.rs.ArtifactData;
import java.io.File;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamingArtifactsApi extends ArtifactsApi {

  private V2RestClient apiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public StreamingArtifactsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public StreamingArtifactsApi(V2RestClient apiClient) {
    super(apiClient);
    this.apiClient = apiClient;
  }

  public void setApiClient(V2RestClient apiClient) {
    super.setApiClient(apiClient);
    this.apiClient = apiClient;
  }
  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }


  /**
   * Build call for createArtifact
   * @param artifactProps Artifact properties (JSON) (required)
   * @param payload Artifact cachedu url payload data (required)
   * @param httpResponseHeader HTTP response status and headers (optional) (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
  <table summary="Response Details" border="1">
  <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
  <tr><td> 201 </td><td> Artifact created </td><td>  -  </td></tr>
  <tr><td> 302 </td><td> Duplicate content; artifact not created </td><td>  * Location -
  Repository query URL to duplicate artifacts <br>  </td></tr> <tr><td> 400 </td><td> Invalid input
  </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
  <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -  </td></tr>
  <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
  </table>
   */
  public okhttp3.Call createArtifactCall(String artifactProps, DigestCachedUrl payload,
                                         String httpResponseHeader, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/artifacts";

    List<Pair> localVarQueryParams = new ArrayList<>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    Map<String, String> localVarHeaderParams = new HashMap<>();
    Map<String, String> localVarCookieParams = new HashMap<>();
    Map<String, Object> localVarFormParams = new HashMap<>();

    if (artifactProps != null) {
      localVarFormParams.put("artifactProps", artifactProps);
    }

    if (httpResponseHeader != null) {
      localVarFormParams.put("httpResponseHeader", httpResponseHeader);
    }

    if (payload != null) {
      localVarFormParams.put("payload", payload);
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"multipart/form-data"};
    final String localVarContentType =
      apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call createArtifactValidateBeforeCall(String artifactProps, DigestCachedUrl payload,
                                                        String httpResponseHeader, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'artifactProps' is set
    if (artifactProps == null) {
      throw new ApiException(
        "Missing the required parameter 'artifactProps' when calling createArtifact(Async)");
    }

    // verify the required parameter 'payload' is set
    if (payload == null) {
      throw new ApiException(
        "Missing the required parameter 'payload' when calling createArtifact(Async)");
    }

    return createArtifactCall(artifactProps, payload, httpResponseHeader, _callback);
  }

  /**
   * Create an artifact
   *
   * @param artifactProps Artifact properties (JSON) (required)
   * @param payload  cachedu url payload data (required)
   * @param httpResponseHeader HTTP response status and headers (optional) (optional)
   * @return Artifact
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
  response body
   * @http.response.details
  <table summary="Response Details" border="1">
  <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
  <tr><td> 201 </td><td> Artifact created </td><td>  -  </td></tr>
  <tr><td> 302 </td><td> Duplicate content; artifact not created </td><td>  * Location -
  Repository query URL to duplicate artifacts <br>  </td></tr> <tr><td> 400 </td><td> Invalid input
  </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
  <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -  </td></tr>
  <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
  </table>
   */
  public Artifact createArtifact(String artifactProps, DigestCachedUrl payload, String httpResponseHeader)
    throws ApiException {
    ApiResponse<Artifact> localVarResp =
      createArtifactWithHttpInfo(artifactProps, payload, httpResponseHeader);
    return localVarResp.getData();
  }

  /**
   * Create an artifact
   *
   * @param artifactProps Artifact properties (JSON) (required)
   * @param payload Artifact payload data (required)
   * @param httpResponseHeader HTTP response status and headers (optional) (optional)
   * @return ApiResponse&lt;Artifact&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
  response body
   * @http.response.details
  <table summary="Response Details" border="1">
  <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
  <tr><td> 201 </td><td> Artifact created </td><td>  -  </td></tr>
  <tr><td> 302 </td><td> Duplicate content; artifact not created </td><td>  * Location -
  Repository query URL to duplicate artifacts <br>  </td></tr> <tr><td> 400 </td><td> Invalid input
  </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
  <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -  </td></tr>
  <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
  </table>
   */
  public ApiResponse<Artifact> createArtifactWithHttpInfo(
    String artifactProps, DigestCachedUrl payload, String httpResponseHeader) throws ApiException {
    okhttp3.Call localVarCall =
      createArtifactValidateBeforeCall(artifactProps, payload, httpResponseHeader, null);
    Type localVarReturnType = new TypeToken<Artifact>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Create an artifact (asynchronously)
   *
   * @param artifactProps Artifact properties (JSON) (required)
   * @param payload Artifact payload data (required)
   * @param httpResponseHeader HTTP response status and headers (optional) (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
  <table summary="Response Details" border="1">
  <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
  <tr><td> 201 </td><td> Artifact created </td><td>  -  </td></tr>
  <tr><td> 302 </td><td> Duplicate content; artifact not created </td><td>  * Location -
  Repository query URL to duplicate artifacts <br>  </td></tr> <tr><td> 400 </td><td> Invalid input
  </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
  <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -  </td></tr>
  <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
  </table>
   */
  public okhttp3.Call createArtifactAsync(String artifactProps, DigestCachedUrl payload,
                                          String httpResponseHeader, final ApiCallback<Artifact> _callback) throws ApiException {
    okhttp3.Call localVarCall =
      createArtifactValidateBeforeCall(artifactProps, payload, httpResponseHeader, _callback);
    Type localVarReturnType = new TypeToken<Artifact>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }


  /**
   * Build call for getMultipartArtifact
   * @param uuid Identifier of the artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param includeContent Controls whether to include the artifact content part in multipart
  response (optional, default to ALWAYS)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
  <table summary="Response Details" border="1">
  <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
  <tr><td> 200 </td><td> Multipart/form-data containing the following parts: The artifact
  properties, HTTP status and headers if present, and the artifact&#39;s payload if requested. See
  POST /artifacts for more information. </td><td>  -  </td></tr> <tr><td> 401 </td><td>
  Unauthorized request </td><td>  -  </td></tr> <tr><td> 403 </td><td> Client not authorized to
  retrieve artifact </td><td>  -  </td></tr> <tr><td> 404 </td><td> Artifact not found </td><td>  -
  </td></tr> <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
  </table>
   */
  public okhttp3.Call getMultipartArtifactCall(String uuid, String namespace, String includeContent,
                                      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/artifacts/{uuid}".replace("{" + "uuid"  + "}",
      apiClient.escapeString(uuid.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (namespace != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    }

    if (includeContent != null) {
      localVarQueryParams.addAll(
        apiClient.parameterToPair("includeContent", includeContent));
    }

    final String[] localVarAccepts = {"multipart/form-data"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
      apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getMultipartArtifactValidateBeforeCall(String uuid, String namespace,
                                                     String includeContent, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      throw new ApiException(
        "Missing the required parameter 'uuid' when calling getMultipartArtifact(Async)");
    }

    return getMultipartArtifactCall(uuid, namespace, includeContent, _callback);
  }

  /**
   * Get artifact and metadata
   *
   * @param uuid Identifier of the artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param includeContent Controls whether to include the artifact content part in multipart
  response (optional, default to ALWAYS)
   * @return ArtifactData
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
  response body
   * @http.response.details
  <table summary="Response Details" border="1">
  <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
  <tr><td> 200 </td><td> Multipart/form-data containing the following parts: The artifact
  properties, HTTP status and headers if present, and the artifact&#39;s payload if requested. See
  POST /artifacts for more information. </td><td>  -  </td></tr> <tr><td> 401 </td><td>
  Unauthorized request </td><td>  -  </td></tr> <tr><td> 403 </td><td> Client not authorized to
  retrieve artifact </td><td>  -  </td></tr> <tr><td> 404 </td><td> Artifact not found </td><td>  -
  </td></tr> <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
  </table>
   */
  public ArtifactData getMultipartArtifact(String uuid, String namespace, String includeContent)
    throws ApiException {
    ApiResponse<ArtifactData> localVarResp = getMultipartArtifactWithHttpInfo(uuid, namespace, includeContent);
    return localVarResp.getData();
  }

  /**
   * Get artifact and metadata
   *
   * @param uuid Identifier of the artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param includeContent Controls whether to include the artifact content part in multipart
  response (optional, default to ALWAYS)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
  response body
   * @http.response.details
  <table summary="Response Details" border="1">
  <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
  <tr><td> 200 </td><td> Multipart/form-data containing the following parts: The artifact
  properties, HTTP status and headers if present, and the artifact&#39;s payload if requested. See
  POST /artifacts for more information. </td><td>  -  </td></tr> <tr><td> 401 </td><td>
  Unauthorized request </td><td>  -  </td></tr> <tr><td> 403 </td><td> Client not authorized to
  retrieve artifact </td><td>  -  </td></tr> <tr><td> 404 </td><td> Artifact not found </td><td>  -
  </td></tr> <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
  </table>
   */
  public ApiResponse<ArtifactData> getMultipartArtifactWithHttpInfo(
    String uuid, String namespace, String includeContent) throws ApiException {
    okhttp3.Call localVarCall =
      getMultipartArtifactValidateBeforeCall(uuid, namespace, includeContent, null);
    Type localVarReturnType = new TypeToken<ArtifactData>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get artifact and metadata (asynchronously)
   *
   * @param uuid Identifier of the artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param includeContent Controls whether to include the artifact content part in multipart
  response (optional, default to ALWAYS)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
  <table summary="Response Details" border="1">
  <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
  <tr><td> 200 </td><td> Multipart/form-data containing the following parts: The artifact
  properties, HTTP status and headers if present, and the artifact&#39;s payload if requested. See
  POST /artifacts for more information. </td><td>  -  </td></tr> <tr><td> 401 </td><td>
  Unauthorized request </td><td>  -  </td></tr> <tr><td> 403 </td><td> Client not authorized to
  retrieve artifact </td><td>  -  </td></tr> <tr><td> 404 </td><td> Artifact not found </td><td>  -
  </td></tr> <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
  </table>
   */
  public okhttp3.Call getMultipartArtifactAsync(String uuid, String namespace, String includeContent,
                                       final ApiCallback<ArtifactData> _callback) throws ApiException {
    okhttp3.Call localVarCall =
      getMultipartArtifactValidateBeforeCall(uuid, namespace, includeContent, _callback);
    Type localVarReturnType = new TypeToken<ArtifactData>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

}
