/*
 * Copyright (c) 2000-2022, Board of Trustees of Leland Stanford Jr. University
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * LOCKSS Repository Service REST API
 * REST API of the LOCKSS Repository Service
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.lockss.laaws.api.rs;

import com.google.gson.reflect.TypeToken;
import org.lockss.laaws.client.*;
import org.lockss.laaws.model.rs.AuSize;
import org.lockss.laaws.model.rs.AuidPageInfo;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AusApi {
  private V2RestClient apiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public AusApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AusApi(V2RestClient apiClient) {
    this.apiClient = apiClient;
  }

  public V2RestClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(V2RestClient apiClient) {
    this.apiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for getArtifactsSize
   * @param auid Identifier of the Archival Unit containing the artifacts (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Returns an AuSize containing the sizes of all the artifacts, only the
   latest artifact version of all URLs, and the sum of the size of all the underlying WARC files, of
   an AU. </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -
   </td></tr> <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> AUID not found in namespace </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getArtifactsSizeCall(
      String auid, String namespace, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/aus/{auid}/size".replace("{"
            + "auid"
            + "}",
        apiClient.escapeString(auid.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (namespace != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getArtifactsSizeValidateBeforeCall(
      String auid, String namespace, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
          "Missing the required parameter 'auid' when calling getArtifactsSize(Async)");
    }

    return getArtifactsSizeCall(auid, namespace, _callback);
  }

  /**
   * Get the size of Archival Unit artifacts in a namespace
   *
   * @param auid Identifier of the Archival Unit containing the artifacts (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @return AuSize
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Returns an AuSize containing the sizes of all the artifacts, only the
   latest artifact version of all URLs, and the sum of the size of all the underlying WARC files, of
   an AU. </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -
   </td></tr> <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> AUID not found in namespace </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public AuSize getArtifactsSize(String auid, String namespace) throws ApiException {
    ApiResponse<AuSize> localVarResp = getArtifactsSizeWithHttpInfo(auid, namespace);
    return localVarResp.getData();
  }

  /**
   * Get the size of Archival Unit artifacts in a namespace
   *
   * @param auid Identifier of the Archival Unit containing the artifacts (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @return ApiResponse&lt;AuSize&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Returns an AuSize containing the sizes of all the artifacts, only the
   latest artifact version of all URLs, and the sum of the size of all the underlying WARC files, of
   an AU. </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -
   </td></tr> <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> AUID not found in namespace </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<AuSize> getArtifactsSizeWithHttpInfo(String auid, String namespace)
      throws ApiException {
    okhttp3.Call localVarCall = getArtifactsSizeValidateBeforeCall(auid, namespace, null);
    Type localVarReturnType = new TypeToken<AuSize>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the size of Archival Unit artifacts in a namespace (asynchronously)
   *
   * @param auid Identifier of the Archival Unit containing the artifacts (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Returns an AuSize containing the sizes of all the artifacts, only the
   latest artifact version of all URLs, and the sum of the size of all the underlying WARC files, of
   an AU. </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -
   </td></tr> <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> AUID not found in namespace </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getArtifactsSizeAsync(
      String auid, String namespace, final ApiCallback<AuSize> _callback) throws ApiException {
    okhttp3.Call localVarCall = getArtifactsSizeValidateBeforeCall(auid, namespace, _callback);
    Type localVarReturnType = new TypeToken<AuSize>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getAus
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param limit The requested maximum number of Archival Unit identifiers per response (optional)
   * @param continuationToken The continuation token of the next page of Archival Unit identifiers
   to be returned (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The requested Archival Unit identifiers </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> No AUIDs in namespace </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getAusCall(String namespace, Integer limit, String continuationToken,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/aus";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (namespace != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    }

    if (limit != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    }

    if (continuationToken != null) {
      localVarQueryParams.addAll(
          apiClient.parameterToPair("continuationToken", continuationToken));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAusValidateBeforeCall(String namespace, Integer limit,
      String continuationToken, final ApiCallback _callback) throws ApiException {
    return getAusCall(namespace, limit, continuationToken, _callback);
  }

  /**
   * Get Archival Unit IDs (AUIDs) in a namespace
   * Get a list of all Archival Unit identifiers in a namespace or a pageful of the list defined by
   the continuation token and size
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param limit The requested maximum number of Archival Unit identifiers per response (optional)
   * @param continuationToken The continuation token of the next page of Archival Unit identifiers
   to be returned (optional)
   * @return AuidPageInfo
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The requested Archival Unit identifiers </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> No AUIDs in namespace </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public AuidPageInfo getAus(String namespace, Integer limit, String continuationToken)
      throws ApiException {
    ApiResponse<AuidPageInfo> localVarResp =
        getAusWithHttpInfo(namespace, limit, continuationToken);
    return localVarResp.getData();
  }

  /**
   * Get Archival Unit IDs (AUIDs) in a namespace
   * Get a list of all Archival Unit identifiers in a namespace or a pageful of the list defined by
   the continuation token and size
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param limit The requested maximum number of Archival Unit identifiers per response (optional)
   * @param continuationToken The continuation token of the next page of Archival Unit identifiers
   to be returned (optional)
   * @return ApiResponse&lt;AuidPageInfo&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The requested Archival Unit identifiers </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> No AUIDs in namespace </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<AuidPageInfo> getAusWithHttpInfo(
      String namespace, Integer limit, String continuationToken) throws ApiException {
    okhttp3.Call localVarCall = getAusValidateBeforeCall(namespace, limit, continuationToken, null);
    Type localVarReturnType = new TypeToken<AuidPageInfo>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Archival Unit IDs (AUIDs) in a namespace (asynchronously)
   * Get a list of all Archival Unit identifiers in a namespace or a pageful of the list defined by
   the continuation token and size
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param limit The requested maximum number of Archival Unit identifiers per response (optional)
   * @param continuationToken The continuation token of the next page of Archival Unit identifiers
   to be returned (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The requested Archival Unit identifiers </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> No AUIDs in namespace </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getAusAsync(String namespace, Integer limit, String continuationToken,
      final ApiCallback<AuidPageInfo> _callback) throws ApiException {
    okhttp3.Call localVarCall =
        getAusValidateBeforeCall(namespace, limit, continuationToken, _callback);
    Type localVarReturnType = new TypeToken<AuidPageInfo>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for handleBulkAuOp
   * @param auid Archival Unit ID (required)
   * @param op Bulk AU transfer operation (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Bulk operation succeeded </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client is forbidden from performing bulk operation </td><td>  -
   </td></tr> <tr><td> 404 </td><td> AUID not in bulk mode </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call handleBulkAuOpCall(
      String auid, String op, String namespace, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/aus/{auid}/bulk".replace("{"
            + "auid"
            + "}",
        apiClient.escapeString(auid.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (op != null) {
      localVarFormParams.put("op", op);
    }

    if (namespace != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    }

    final String[] localVarAccepts = {};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"multipart/form-data"};
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call handleBulkAuOpValidateBeforeCall(
      String auid, String op, String namespace, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
          "Missing the required parameter 'auid' when calling handleBulkAuOp(Async)");
    }

    // verify the required parameter 'op' is set
    if (op == null) {
      throw new ApiException(
          "Missing the required parameter 'op' when calling handleBulkAuOp(Async)");
    }

    return handleBulkAuOpCall(auid, op, namespace, _callback);
  }

  /**
   * Marks the AUID for bulk artifact transfer
   *
   * @param auid Archival Unit ID (required)
   * @param op Bulk AU transfer operation (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Bulk operation succeeded </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client is forbidden from performing bulk operation </td><td>  -
   </td></tr> <tr><td> 404 </td><td> AUID not in bulk mode </td><td>  -  </td></tr>
   </table>
   */
  public void handleBulkAuOp(String auid, String op, String namespace) throws ApiException {
    handleBulkAuOpWithHttpInfo(auid, op, namespace);
  }

  /**
   * Marks the AUID for bulk artifact transfer
   *
   * @param auid Archival Unit ID (required)
   * @param op Bulk AU transfer operation (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Bulk operation succeeded </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client is forbidden from performing bulk operation </td><td>  -
   </td></tr> <tr><td> 404 </td><td> AUID not in bulk mode </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<Void> handleBulkAuOpWithHttpInfo(String auid, String op, String namespace)
      throws ApiException {
    okhttp3.Call localVarCall = handleBulkAuOpValidateBeforeCall(auid, op, namespace, null);
    return apiClient.execute(localVarCall);
  }

  /**
   * Marks the AUID for bulk artifact transfer (asynchronously)
   *
   * @param auid Archival Unit ID (required)
   * @param op Bulk AU transfer operation (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Bulk operation succeeded </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client is forbidden from performing bulk operation </td><td>  -
   </td></tr> <tr><td> 404 </td><td> AUID not in bulk mode </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call handleBulkAuOpAsync(String auid, String op, String namespace,
      final ApiCallback<Void> _callback) throws ApiException {
    okhttp3.Call localVarCall = handleBulkAuOpValidateBeforeCall(auid, op, namespace, _callback);
    apiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
}
