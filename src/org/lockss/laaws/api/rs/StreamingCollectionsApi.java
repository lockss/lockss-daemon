/*
 * 2022, Board of Trustees of Leland Stanford Jr. University,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * LOCKSS Repository Service REST API
 * REST API of the LOCKSS Repository Service
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.lockss.laaws.api.rs;

import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.lockss.laaws.model.rs.ArtifactData;
import org.lockss.laaws.V2AuMover.DigestCachedUrl;
import org.lockss.laaws.client.*;
import org.lockss.laaws.model.rs.Artifact;

public class StreamingCollectionsApi extends CollectionsApi {

  private V2RestClient apiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public StreamingCollectionsApi() {
    super(Configuration.getDefaultApiClient());
  }

  public StreamingCollectionsApi(V2RestClient apiClient) {
    super(apiClient);
    this.apiClient = apiClient;
  }

  public void setApiClient(V2RestClient apiClient) {
    super.setApiClient(apiClient);
    this.apiClient = apiClient;
  }
  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }


  /**
   * Build call for createArtifact
   *
   * @param collectionid   Collection containing the artifact (required)
   * @param auid           Archival Unit ID (AUID) of new artifact (required)
   * @param uri            URI represented by this artifact (required)
   * @param artifact       Artifact data (required)
   * @param collectionDate Artifact collection/crawl date (milliseconds since epoch; UTC) (optional)
   * @param _callback      Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> Artifact created </td><td>  -  </td></tr>
   * <tr><td> 302 </td><td> Duplicate content; artifact not created </td><td>  * Location - Repository query URL to duplicate artifacts <br>  </td></tr>
   * <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -  </td></tr>
   * <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call createArtifactCall(String collectionid, String auid, String uri,
      DigestCachedUrl artifact, Long collectionDate, final ApiCallback _callback) throws ApiException {
    String basePath = null;

    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
      basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/collections/{collectionid}/artifacts"
        .replaceAll("\\{" + "collectionid" + "\\}", apiClient.escapeString(collectionid));

    List<Pair> localVarQueryParams = new ArrayList<>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<>();
    Map<String, String> localVarHeaderParams = new HashMap<>();
    Map<String, String> localVarCookieParams = new HashMap<>();
    Map<String, Object> localVarFormParams = new HashMap<>();

    if (auid != null) {
      localVarFormParams.put("auid", auid);
    }

    if (uri != null) {
      localVarFormParams.put("uri", uri);
    }

    if (collectionDate != null) {
      localVarFormParams.put("collectionDate", collectionDate);
    }

    if (artifact != null) {
      localVarFormParams.put("artifact", artifact);
    }

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {
        "multipart/form-data"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }
    localVarHeaderParams.put("Content-Type", localVarContentType);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }


    String[] localVarAuthNames = new String[]{ "basicAuth" };
    return apiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call createArtifactValidateBeforeCall(String collectionid, String auid,
      String uri, DigestCachedUrl artifact, Long collectionDate, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'collectionid' is set
    if (collectionid == null) {
      throw new ApiException(
          "Missing the required parameter 'collectionid' when calling createArtifact(Async)");
    }

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
          "Missing the required parameter 'auid' when calling createArtifact(Async)");
    }

    // verify the required parameter 'uri' is set
    if (uri == null) {
      throw new ApiException(
          "Missing the required parameter 'uri' when calling createArtifact(Async)");
    }

    // verify the required parameter 'artifact' is set
    if (artifact == null) {
      throw new ApiException(
          "Missing the required parameter 'artifact' when calling createArtifact(Async)");
    }

    okhttp3.Call localVarCall = createArtifactCall(collectionid, auid, uri, artifact,
        collectionDate, _callback);
    return localVarCall;

  }

  /**
   * Create an artifact
   *
   * @param collectionid   Collection containing the artifact (required)
   * @param auid           Archival Unit ID (AUID) of new artifact (required)
   * @param uri            URI represented by this artifact (required)
   * @param artifact       Artifact data (required)
   * @param collectionDate Artifact collection/crawl date (milliseconds since epoch; UTC) (optional)
   * @return Artifact
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> Artifact created </td><td>  -  </td></tr>
   * <tr><td> 302 </td><td> Duplicate content; artifact not created </td><td>  * Location - Repository query URL to duplicate artifacts <br>  </td></tr>
   * <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -  </td></tr>
   * <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
   * </table>
   */
  public Artifact createArtifact(String collectionid, String auid, String uri, DigestCachedUrl artifact,
      Long collectionDate) throws ApiException {
    ApiResponse<Artifact> localVarResp = createArtifactWithHttpInfo(collectionid, auid, uri,
        artifact, collectionDate);
    return localVarResp.getData();
  }

  /**
   * Create an artifact
   *
   * @param collectionid   Collection containing the artifact (required)
   * @param auid           Archival Unit ID (AUID) of new artifact (required)
   * @param uri            URI represented by this artifact (required)
   * @param artifact       Artifact data (required)
   * @param collectionDate Artifact collection/crawl date (milliseconds since epoch; UTC) (optional)
   * @return ApiResponse&lt;Artifact&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> Artifact created </td><td>  -  </td></tr>
   * <tr><td> 302 </td><td> Duplicate content; artifact not created </td><td>  * Location - Repository query URL to duplicate artifacts <br>  </td></tr>
   * <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -  </td></tr>
   * <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Artifact> createArtifactWithHttpInfo(String collectionid, String auid,
      String uri, DigestCachedUrl artifact, Long collectionDate) throws ApiException {
    okhttp3.Call localVarCall = createArtifactValidateBeforeCall(collectionid, auid, uri, artifact,
        collectionDate, null);
    Type localVarReturnType = new TypeToken<Artifact>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Create an artifact (asynchronously)
   *
   * @param collectionid   Collection containing the artifact (required)
   * @param auid           Archival Unit ID (AUID) of new artifact (required)
   * @param uri            URI represented by this artifact (required)
   * @param artifact       Artifact data (required)
   * @param collectionDate Artifact collection/crawl date (milliseconds since epoch; UTC) (optional)
   * @param _callback      The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 201 </td><td> Artifact created </td><td>  -  </td></tr>
   * <tr><td> 302 </td><td> Duplicate content; artifact not created </td><td>  * Location - Repository query URL to duplicate artifacts <br>  </td></tr>
   * <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -  </td></tr>
   * <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call createArtifactAsync(String collectionid, String auid, String uri,
      DigestCachedUrl artifact, Long collectionDate, final ApiCallback<Artifact> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = createArtifactValidateBeforeCall(collectionid, auid, uri, artifact,
        collectionDate, _callback);
    Type localVarReturnType = new TypeToken<Artifact>(){}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getMultipartArtifact
   *
   * @param collectionid   Collection containing the artifact (required)
   * @param artifactid     Identifier of the artifact (required)
   * @param includeContent Controls whether to include the artifact content part in multipart response (optional, default to ALWAYS)
   * @param _callback      Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
  <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Artifact created </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Client not authorized to retrieve artifact </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Artifact not found </td><td>  -  </td></tr>
   * <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getMultipartArtifactCall(String collectionid, String artifactid, String includeContent,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;

    // Operation Servers
    String[] localBasePaths = new String[] {  };

    // Determine Base Path to Use
    if (localCustomBaseUrl != null){
      basePath = localCustomBaseUrl;
    } else if ( localBasePaths.length > 0 ) {
      basePath = localBasePaths[localHostIndex];
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/collections/{collectionid}/artifacts/{artifactid}"
        .replaceAll("\\{" + "collectionid" + "\\}",
            apiClient.escapeString(collectionid.toString()))
        .replaceAll("\\{" + "artifactid" + "\\}",
            apiClient.escapeString(artifactid.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (includeContent != null) {
      localVarQueryParams.addAll(
          apiClient.parameterToPair("includeContent", includeContent));
    }

    final String[] localVarAccepts = {
        "multipart/form-data"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(
        localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getMultipartArtifactValidateBeforeCall(String collectionid, String artifactid,
      String includeContent, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'collectionid' is set
    if (collectionid == null) {
      throw new ApiException(
          "Missing the required parameter 'collectionid' when calling getMultipartArtifact(Async)");
    }

    // verify the required parameter 'artifactid' is set
    if (artifactid == null) {
      throw new ApiException(
          "Missing the required parameter 'artifactid' when calling getMultipartArtifact(Async)");
    }

    okhttp3.Call localVarCall = getMultipartArtifactCall(collectionid, artifactid, includeContent,
        _callback);
    return localVarCall;

  }

  /**
   * Get artifact content and metadata
   *
   * @param collectionid   Collection containing the artifact (required)
   * @param artifactid     Identifier of the artifact (required)
   * @param includeContent Controls whether to include the artifact content part in multipart response (optional, default to ALWAYS)
   * @return ArtifactData
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details
  <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Artifact created </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Client not authorized to retrieve artifact </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Artifact not found </td><td>  -  </td></tr>
   * <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   * </table>
   */
  public ArtifactData getMultipartArtifact(String collectionid, String artifactid, String includeContent)
      throws ApiException {
    ApiResponse<ArtifactData> localVarResp = getMultipartArtifactWithHttpInfo(collectionid, artifactid,
        includeContent);
    return localVarResp.getData();
  }

  /**
   * Get artifact content and metadata
   *
   * @param collectionid   Collection containing the artifact (required)
   * @param artifactid     Identifier of the artifact (required)
   * @param includeContent Controls whether to include the artifact content part in multipart response (optional, default to ALWAYS)
   * @return ApiResponse&lt;ArtifactData&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details
  <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Artifact created </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Client not authorized to retrieve artifact </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Artifact not found </td><td>  -  </td></tr>
   * <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<ArtifactData> getMultipartArtifactWithHttpInfo(String collectionid, String artifactid,
      String includeContent) throws ApiException {
    okhttp3.Call localVarCall = getMultipartArtifactValidateBeforeCall(collectionid, artifactid,
        includeContent, null);
    Type localVarReturnType = new TypeToken<ArtifactData>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get artifact content and metadata (asynchronously)
   *
   * @param collectionid   Collection containing the artifact (required)
   * @param artifactid     Identifier of the artifact (required)
   * @param includeContent Controls whether to include the artifact content part in multipart response (optional, default to ALWAYS)
   * @param _callback      The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
  <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Artifact created </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Client not authorized to retrieve artifact </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Artifact not found </td><td>  -  </td></tr>
   * <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getMultipartArtifactAsync(String collectionid, String artifactid,
      String includeContent, final ApiCallback<ArtifactData> _callback) throws ApiException {

    okhttp3.Call localVarCall = getMultipartArtifactValidateBeforeCall(collectionid, artifactid,
        includeContent, _callback);
    Type localVarReturnType = new TypeToken<ArtifactData>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

}
