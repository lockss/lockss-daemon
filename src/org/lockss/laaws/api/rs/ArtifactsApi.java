/*
 * Copyright (c) 2000-2022, Board of Trustees of Leland Stanford Jr. University
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * LOCKSS Repository Service REST API
 * REST API of the LOCKSS Repository Service
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.lockss.laaws.api.rs;

import com.google.gson.reflect.TypeToken;
import org.lockss.laaws.client.*;
import org.lockss.laaws.model.rs.Artifact;
import org.lockss.laaws.model.rs.ArtifactPageInfo;
import java.io.File;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArtifactsApi {
  private V2RestClient apiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public ArtifactsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ArtifactsApi(V2RestClient apiClient) {
    this.apiClient = apiClient;
  }

  public V2RestClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(V2RestClient apiClient) {
    this.apiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for addArtifacts
   * @param auid Archival Unit ID (AUID) of new artifact (required)
   * @param archive Archive data containing artifacts (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Status of artifacts imported from the archive, maybe partially. Return
   body is a sequence of JSON ImportStatus objects. </td><td>  -  </td></tr> <tr><td> 400 </td><td>
   Invalid input </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -
   </td></tr> <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -
   </td></tr> <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call addArtifactsCall(String auid, File archive, String namespace,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/archives";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (auid != null) {
      localVarFormParams.put("auid", auid);
    }

    if (archive != null) {
      localVarFormParams.put("archive", archive);
    }

    if (namespace != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"multipart/form-data"};
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addArtifactsValidateBeforeCall(String auid, File archive, String namespace,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
          "Missing the required parameter 'auid' when calling addArtifacts(Async)");
    }

    // verify the required parameter 'archive' is set
    if (archive == null) {
      throw new ApiException(
          "Missing the required parameter 'archive' when calling addArtifacts(Async)");
    }

    return addArtifactsCall(auid, archive, namespace, _callback);
  }

  /**
   * Imports artifacts from an archive
   *
   * @param auid Archival Unit ID (AUID) of new artifact (required)
   * @param archive Archive data containing artifacts (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @return File
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Status of artifacts imported from the archive, maybe partially. Return
   body is a sequence of JSON ImportStatus objects. </td><td>  -  </td></tr> <tr><td> 400 </td><td>
   Invalid input </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -
   </td></tr> <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -
   </td></tr> <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
   </table>
   */
  public File addArtifacts(String auid, File archive, String namespace) throws ApiException {
    ApiResponse<File> localVarResp = addArtifactsWithHttpInfo(auid, archive, namespace);
    return localVarResp.getData();
  }

  /**
   * Imports artifacts from an archive
   *
   * @param auid Archival Unit ID (AUID) of new artifact (required)
   * @param archive Archive data containing artifacts (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Status of artifacts imported from the archive, maybe partially. Return
   body is a sequence of JSON ImportStatus objects. </td><td>  -  </td></tr> <tr><td> 400 </td><td>
   Invalid input </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -
   </td></tr> <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -
   </td></tr> <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<File> addArtifactsWithHttpInfo(String auid, File archive, String namespace)
      throws ApiException {
    okhttp3.Call localVarCall = addArtifactsValidateBeforeCall(auid, archive, namespace, null);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Imports artifacts from an archive (asynchronously)
   *
   * @param auid Archival Unit ID (AUID) of new artifact (required)
   * @param archive Archive data containing artifacts (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Status of artifacts imported from the archive, maybe partially. Return
   body is a sequence of JSON ImportStatus objects. </td><td>  -  </td></tr> <tr><td> 400 </td><td>
   Invalid input </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -
   </td></tr> <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -
   </td></tr> <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call addArtifactsAsync(String auid, File archive, String namespace,
      final ApiCallback<File> _callback) throws ApiException {
    okhttp3.Call localVarCall = addArtifactsValidateBeforeCall(auid, archive, namespace, _callback);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for createArtifact
   * @param artifactProps Artifact properties (JSON) (required)
   * @param payload Artifact payload data (required)
   * @param httpResponseHeader HTTP response status and headers (optional) (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 201 </td><td> Artifact created </td><td>  -  </td></tr>
      <tr><td> 302 </td><td> Duplicate content; artifact not created </td><td>  * Location -
   Repository query URL to duplicate artifacts <br>  </td></tr> <tr><td> 400 </td><td> Invalid input
   </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call createArtifactCall(String artifactProps, File payload,
      String httpResponseHeader, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/artifacts";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (artifactProps != null) {
      localVarFormParams.put("artifactProps", artifactProps);
    }

    if (httpResponseHeader != null) {
      localVarFormParams.put("httpResponseHeader", httpResponseHeader);
    }

    if (payload != null) {
      localVarFormParams.put("payload", payload);
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"multipart/form-data"};
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call createArtifactValidateBeforeCall(String artifactProps, File payload,
      String httpResponseHeader, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'artifactProps' is set
    if (artifactProps == null) {
      throw new ApiException(
          "Missing the required parameter 'artifactProps' when calling createArtifact(Async)");
    }

    // verify the required parameter 'payload' is set
    if (payload == null) {
      throw new ApiException(
          "Missing the required parameter 'payload' when calling createArtifact(Async)");
    }

    return createArtifactCall(artifactProps, payload, httpResponseHeader, _callback);
    }

  /**
   * Create an artifact
   *
   * @param artifactProps Artifact properties (JSON) (required)
   * @param payload Artifact payload data (required)
   * @param httpResponseHeader HTTP response status and headers (optional) (optional)
   * @return Artifact
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 201 </td><td> Artifact created </td><td>  -  </td></tr>
      <tr><td> 302 </td><td> Duplicate content; artifact not created </td><td>  * Location -
   Repository query URL to duplicate artifacts <br>  </td></tr> <tr><td> 400 </td><td> Invalid input
   </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
   </table>
   */
  public Artifact createArtifact(String artifactProps, File payload, String httpResponseHeader)
      throws ApiException {
    ApiResponse<Artifact> localVarResp =
        createArtifactWithHttpInfo(artifactProps, payload, httpResponseHeader);
    return localVarResp.getData();
  }

  /**
   * Create an artifact
   *
   * @param artifactProps Artifact properties (JSON) (required)
   * @param payload Artifact payload data (required)
   * @param httpResponseHeader HTTP response status and headers (optional) (optional)
   * @return ApiResponse&lt;Artifact&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 201 </td><td> Artifact created </td><td>  -  </td></tr>
      <tr><td> 302 </td><td> Duplicate content; artifact not created </td><td>  * Location -
   Repository query URL to duplicate artifacts <br>  </td></tr> <tr><td> 400 </td><td> Invalid input
   </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<Artifact> createArtifactWithHttpInfo(
      String artifactProps, File payload, String httpResponseHeader) throws ApiException {
    okhttp3.Call localVarCall =
        createArtifactValidateBeforeCall(artifactProps, payload, httpResponseHeader, null);
    Type localVarReturnType = new TypeToken<Artifact>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Create an artifact (asynchronously)
   *
   * @param artifactProps Artifact properties (JSON) (required)
   * @param payload Artifact payload data (required)
   * @param httpResponseHeader HTTP response status and headers (optional) (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 201 </td><td> Artifact created </td><td>  -  </td></tr>
      <tr><td> 302 </td><td> Duplicate content; artifact not created </td><td>  * Location -
   Repository query URL to duplicate artifacts <br>  </td></tr> <tr><td> 400 </td><td> Invalid input
   </td><td>  -  </td></tr> <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to create artifacts </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Internal error creating artifact </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call createArtifactAsync(String artifactProps, File payload,
      String httpResponseHeader, final ApiCallback<Artifact> _callback) throws ApiException {
    okhttp3.Call localVarCall =
        createArtifactValidateBeforeCall(artifactProps, payload, httpResponseHeader, _callback);
    Type localVarReturnType = new TypeToken<Artifact>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for deleteArtifact
   * @param uuid Identifier of the artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Successfully removed artifact </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to delete artifact </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Artifact not found </td><td>  -  </td></tr>
      <tr><td> 409 </td><td> Cannot delete artifact </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call deleteArtifactCall(String uuid, String namespace, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/artifacts/{uuid}".replace("{"
            + "uuid"
            + "}",
        apiClient.escapeString(uuid.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (namespace != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    }

    final String[] localVarAccepts = {};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteArtifactValidateBeforeCall(
      String uuid, String namespace, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      throw new ApiException(
          "Missing the required parameter 'uuid' when calling deleteArtifact(Async)");
    }

    return deleteArtifactCall(uuid, namespace, _callback);
  }

  /**
   * Remove an artifact from the repository
   *
   * @param uuid Identifier of the artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Successfully removed artifact </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to delete artifact </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Artifact not found </td><td>  -  </td></tr>
      <tr><td> 409 </td><td> Cannot delete artifact </td><td>  -  </td></tr>
   </table>
   */
  public void deleteArtifact(String uuid, String namespace) throws ApiException {
    deleteArtifactWithHttpInfo(uuid, namespace);
  }

  /**
   * Remove an artifact from the repository
   *
   * @param uuid Identifier of the artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Successfully removed artifact </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to delete artifact </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Artifact not found </td><td>  -  </td></tr>
      <tr><td> 409 </td><td> Cannot delete artifact </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<Void> deleteArtifactWithHttpInfo(String uuid, String namespace)
      throws ApiException {
    okhttp3.Call localVarCall = deleteArtifactValidateBeforeCall(uuid, namespace, null);
    return apiClient.execute(localVarCall);
  }

  /**
   * Remove an artifact from the repository (asynchronously)
   *
   * @param uuid Identifier of the artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Successfully removed artifact </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to delete artifact </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Artifact not found </td><td>  -  </td></tr>
      <tr><td> 409 </td><td> Cannot delete artifact </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call deleteArtifactAsync(
      String uuid, String namespace, final ApiCallback<Void> _callback) throws ApiException {
    okhttp3.Call localVarCall = deleteArtifactValidateBeforeCall(uuid, namespace, _callback);
    apiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
  /**
   * Build call for getArtifact
   * @param uuid Identifier of the artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param includeContent Controls whether to include the artifact content part in multipart
   response (optional, default to ALWAYS)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Multipart/form-data containing the following parts: The artifact
   properties, HTTP status and headers if present, and the artifact&#39;s payload if requested. See
   POST /artifacts for more information. </td><td>  -  </td></tr> <tr><td> 401 </td><td>
   Unauthorized request </td><td>  -  </td></tr> <tr><td> 403 </td><td> Client not authorized to
   retrieve artifact </td><td>  -  </td></tr> <tr><td> 404 </td><td> Artifact not found </td><td>  -
   </td></tr> <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getArtifactCall(String uuid, String namespace, String includeContent,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/artifacts/{uuid}".replace("{"
            + "uuid"
            + "}",
        apiClient.escapeString(uuid.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (namespace != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    }

    if (includeContent != null) {
      localVarQueryParams.addAll(
          apiClient.parameterToPair("includeContent", includeContent));
    }

    final String[] localVarAccepts = {"multipart/form-data",
                                      "application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getArtifactValidateBeforeCall(String uuid, String namespace,
      String includeContent, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      throw new ApiException(
          "Missing the required parameter 'uuid' when calling getArtifact(Async)");
    }

    return getArtifactCall(uuid, namespace, includeContent, _callback);
  }

  /**
   * Get artifact and metadata
   *
   * @param uuid Identifier of the artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param includeContent Controls whether to include the artifact content part in multipart
   response (optional, default to ALWAYS)
   * @return File
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Multipart/form-data containing the following parts: The artifact
   properties, HTTP status and headers if present, and the artifact&#39;s payload if requested. See
   POST /artifacts for more information. </td><td>  -  </td></tr> <tr><td> 401 </td><td>
   Unauthorized request </td><td>  -  </td></tr> <tr><td> 403 </td><td> Client not authorized to
   retrieve artifact </td><td>  -  </td></tr> <tr><td> 404 </td><td> Artifact not found </td><td>  -
   </td></tr> <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public File getArtifact(String uuid, String namespace, String includeContent)
      throws ApiException {
    ApiResponse<File> localVarResp = getArtifactWithHttpInfo(uuid, namespace, includeContent);
    return localVarResp.getData();
  }

  /**
   * Get artifact and metadata
   *
   * @param uuid Identifier of the artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param includeContent Controls whether to include the artifact content part in multipart
   response (optional, default to ALWAYS)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Multipart/form-data containing the following parts: The artifact
   properties, HTTP status and headers if present, and the artifact&#39;s payload if requested. See
   POST /artifacts for more information. </td><td>  -  </td></tr> <tr><td> 401 </td><td>
   Unauthorized request </td><td>  -  </td></tr> <tr><td> 403 </td><td> Client not authorized to
   retrieve artifact </td><td>  -  </td></tr> <tr><td> 404 </td><td> Artifact not found </td><td>  -
   </td></tr> <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<File> getArtifactWithHttpInfo(
      String uuid, String namespace, String includeContent) throws ApiException {
    okhttp3.Call localVarCall =
        getArtifactValidateBeforeCall(uuid, namespace, includeContent, null);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get artifact and metadata (asynchronously)
   *
   * @param uuid Identifier of the artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param includeContent Controls whether to include the artifact content part in multipart
   response (optional, default to ALWAYS)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Multipart/form-data containing the following parts: The artifact
   properties, HTTP status and headers if present, and the artifact&#39;s payload if requested. See
   POST /artifacts for more information. </td><td>  -  </td></tr> <tr><td> 401 </td><td>
   Unauthorized request </td><td>  -  </td></tr> <tr><td> 403 </td><td> Client not authorized to
   retrieve artifact </td><td>  -  </td></tr> <tr><td> 404 </td><td> Artifact not found </td><td>  -
   </td></tr> <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getArtifactAsync(String uuid, String namespace, String includeContent,
      final ApiCallback<File> _callback) throws ApiException {
    okhttp3.Call localVarCall =
        getArtifactValidateBeforeCall(uuid, namespace, includeContent, _callback);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getArtifacts
   * @param auid Identifier of the Archival Unit containing the artifacts (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param url The URL contained by the artifacts (optional)
   * @param urlPrefix The prefix to be matched by the artifact URLs (optional)
   * @param version The version of the artifact (optional)
   * @param includeUncommitted Indication of whether uncommitted artifacts should be returned
   (optional)
   * @param limit The requested maximum number of artifacts per response (optional)
   * @param continuationToken The continuation token of the next page of artifacts to be returned
   (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The requested artifacts </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> AUID not found in namespace </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getArtifactsCall(String auid, String namespace, String url, String urlPrefix,
      String version, Boolean includeUncommitted, Integer limit, String continuationToken,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/aus/{auid}/artifacts".replace("{"
            + "auid"
            + "}",
        apiClient.escapeString(auid.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (namespace != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    }

    if (url != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("url", url));
    }

    if (urlPrefix != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("urlPrefix", urlPrefix));
    }

    if (version != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("version", version));
    }

    if (includeUncommitted != null) {
      localVarQueryParams.addAll(
          apiClient.parameterToPair("includeUncommitted", includeUncommitted));
    }

    if (limit != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    }

    if (continuationToken != null) {
      localVarQueryParams.addAll(
          apiClient.parameterToPair("continuationToken", continuationToken));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getArtifactsValidateBeforeCall(String auid, String namespace, String url,
      String urlPrefix, String version, Boolean includeUncommitted, Integer limit,
      String continuationToken, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
          "Missing the required parameter 'auid' when calling getArtifacts(Async)");
    }

    return getArtifactsCall(auid, namespace, url, urlPrefix, version, includeUncommitted, limit,
        continuationToken, _callback);
  }

  /**
   * Get artifacts in an Archival Unit
   * Get a list of all artifacts in a namespace and Archival Unit or a pageful of the list defined
   by the continuation token and size
   * @param auid Identifier of the Archival Unit containing the artifacts (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param url The URL contained by the artifacts (optional)
   * @param urlPrefix The prefix to be matched by the artifact URLs (optional)
   * @param version The version of the artifact (optional)
   * @param includeUncommitted Indication of whether uncommitted artifacts should be returned
   (optional)
   * @param limit The requested maximum number of artifacts per response (optional)
   * @param continuationToken The continuation token of the next page of artifacts to be returned
   (optional)
   * @return ArtifactPageInfo
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The requested artifacts </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> AUID not found in namespace </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public ArtifactPageInfo getArtifacts(String auid, String namespace, String url, String urlPrefix,
      String version, Boolean includeUncommitted, Integer limit, String continuationToken)
      throws ApiException {
    ApiResponse<ArtifactPageInfo> localVarResp = getArtifactsWithHttpInfo(
        auid, namespace, url, urlPrefix, version, includeUncommitted, limit, continuationToken);
    return localVarResp.getData();
  }

  /**
   * Get artifacts in an Archival Unit
   * Get a list of all artifacts in a namespace and Archival Unit or a pageful of the list defined
   by the continuation token and size
   * @param auid Identifier of the Archival Unit containing the artifacts (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param url The URL contained by the artifacts (optional)
   * @param urlPrefix The prefix to be matched by the artifact URLs (optional)
   * @param version The version of the artifact (optional)
   * @param includeUncommitted Indication of whether uncommitted artifacts should be returned
   (optional)
   * @param limit The requested maximum number of artifacts per response (optional)
   * @param continuationToken The continuation token of the next page of artifacts to be returned
   (optional)
   * @return ApiResponse&lt;ArtifactPageInfo&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The requested artifacts </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> AUID not found in namespace </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<ArtifactPageInfo> getArtifactsWithHttpInfo(String auid, String namespace,
      String url, String urlPrefix, String version, Boolean includeUncommitted, Integer limit,
      String continuationToken) throws ApiException {
    okhttp3.Call localVarCall = getArtifactsValidateBeforeCall(auid, namespace, url, urlPrefix,
        version, includeUncommitted, limit, continuationToken, null);
    Type localVarReturnType = new TypeToken<ArtifactPageInfo>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get artifacts in an Archival Unit (asynchronously)
   * Get a list of all artifacts in a namespace and Archival Unit or a pageful of the list defined
   by the continuation token and size
   * @param auid Identifier of the Archival Unit containing the artifacts (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param url The URL contained by the artifacts (optional)
   * @param urlPrefix The prefix to be matched by the artifact URLs (optional)
   * @param version The version of the artifact (optional)
   * @param includeUncommitted Indication of whether uncommitted artifacts should be returned
   (optional)
   * @param limit The requested maximum number of artifacts per response (optional)
   * @param continuationToken The continuation token of the next page of artifacts to be returned
   (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The requested artifacts </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> AUID not found in namespace </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getArtifactsAsync(String auid, String namespace, String url, String urlPrefix,
      String version, Boolean includeUncommitted, Integer limit, String continuationToken,
      final ApiCallback<ArtifactPageInfo> _callback) throws ApiException {
    okhttp3.Call localVarCall = getArtifactsValidateBeforeCall(auid, namespace, url, urlPrefix,
        version, includeUncommitted, limit, continuationToken, _callback);
    Type localVarReturnType = new TypeToken<ArtifactPageInfo>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getArtifactsFromAllAus
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param url The URL contained by the artifacts (optional)
   * @param urlPrefix The prefix to be matched by the artifact URLs (optional)
   * @param versions Versions of the artifacts to return (optional, default to all)
   * @param limit The requested maximum number of artifacts per response (optional)
   * @param continuationToken The continuation token of the next page of artifacts to be returned
   (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The requested artifacts </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getArtifactsFromAllAusCall(String namespace, String url, String urlPrefix,
      String versions, Integer limit, String continuationToken, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/artifacts";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (namespace != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    }

    if (url != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("url", url));
    }

    if (urlPrefix != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("urlPrefix", urlPrefix));
    }

    if (versions != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("versions", versions));
    }

    if (limit != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    }

    if (continuationToken != null) {
      localVarQueryParams.addAll(
          apiClient.parameterToPair("continuationToken", continuationToken));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getArtifactsFromAllAusValidateBeforeCall(String namespace, String url,
      String urlPrefix, String versions, Integer limit, String continuationToken,
      final ApiCallback _callback) throws ApiException {
    return getArtifactsFromAllAusCall(
        namespace, url, urlPrefix, versions, limit, continuationToken, _callback);
  }

  /**
   * Returns all artifacts that match a given a URL or URL prefix and/or version.
   *
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param url The URL contained by the artifacts (optional)
   * @param urlPrefix The prefix to be matched by the artifact URLs (optional)
   * @param versions Versions of the artifacts to return (optional, default to all)
   * @param limit The requested maximum number of artifacts per response (optional)
   * @param continuationToken The continuation token of the next page of artifacts to be returned
   (optional)
   * @return ArtifactPageInfo
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The requested artifacts </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public ArtifactPageInfo getArtifactsFromAllAus(String namespace, String url, String urlPrefix,
      String versions, Integer limit, String continuationToken) throws ApiException {
    ApiResponse<ArtifactPageInfo> localVarResp = getArtifactsFromAllAusWithHttpInfo(
        namespace, url, urlPrefix, versions, limit, continuationToken);
    return localVarResp.getData();
  }

  /**
   * Returns all artifacts that match a given a URL or URL prefix and/or version.
   *
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param url The URL contained by the artifacts (optional)
   * @param urlPrefix The prefix to be matched by the artifact URLs (optional)
   * @param versions Versions of the artifacts to return (optional, default to all)
   * @param limit The requested maximum number of artifacts per response (optional)
   * @param continuationToken The continuation token of the next page of artifacts to be returned
   (optional)
   * @return ApiResponse&lt;ArtifactPageInfo&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The requested artifacts </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<ArtifactPageInfo> getArtifactsFromAllAusWithHttpInfo(String namespace,
      String url, String urlPrefix, String versions, Integer limit, String continuationToken)
      throws ApiException {
    okhttp3.Call localVarCall = getArtifactsFromAllAusValidateBeforeCall(
        namespace, url, urlPrefix, versions, limit, continuationToken, null);
    Type localVarReturnType = new TypeToken<ArtifactPageInfo>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Returns all artifacts that match a given a URL or URL prefix and/or version. (asynchronously)
   *
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param url The URL contained by the artifacts (optional)
   * @param urlPrefix The prefix to be matched by the artifact URLs (optional)
   * @param versions Versions of the artifacts to return (optional, default to all)
   * @param limit The requested maximum number of artifacts per response (optional)
   * @param continuationToken The continuation token of the next page of artifacts to be returned
   (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The requested artifacts </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to retrieve data </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
      <tr><td> 502 </td><td> Could not read from external resource </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getArtifactsFromAllAusAsync(String namespace, String url, String urlPrefix,
      String versions, Integer limit, String continuationToken,
      final ApiCallback<ArtifactPageInfo> _callback) throws ApiException {
    okhttp3.Call localVarCall = getArtifactsFromAllAusValidateBeforeCall(
        namespace, url, urlPrefix, versions, limit, continuationToken, _callback);
    Type localVarReturnType = new TypeToken<ArtifactPageInfo>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for updateArtifact
   * @param uuid Identifier of the artifact (required)
   * @param committed New commit status of artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Artifact updated </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to update artifact </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Artifact not found </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call updateArtifactCall(String uuid, Boolean committed, String namespace,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/artifacts/{uuid}".replace("{"
            + "uuid"
            + "}",
        apiClient.escapeString(uuid.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (committed != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("committed", committed));
      //localVarFormParams.put("committed", committed);
    }

    if (namespace != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"multipart/form-data"};
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateArtifactValidateBeforeCall(String uuid, Boolean committed,
      String namespace, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      throw new ApiException(
          "Missing the required parameter 'uuid' when calling updateArtifact(Async)");
    }

    // verify the required parameter 'committed' is set
    if (committed == null) {
      throw new ApiException(
          "Missing the required parameter 'committed' when calling updateArtifact(Async)");
    }

    return updateArtifactCall(uuid, committed, namespace, _callback);
  }

  /**
   * Update the property of an artifact
   *
   * @param uuid Identifier of the artifact (required)
   * @param committed New commit status of artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @return Artifact
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Artifact updated </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to update artifact </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Artifact not found </td><td>  -  </td></tr>
   </table>
   */
  public Artifact updateArtifact(String uuid, Boolean committed, String namespace)
      throws ApiException {
    ApiResponse<Artifact> localVarResp = updateArtifactWithHttpInfo(uuid, committed, namespace);
    return localVarResp.getData();
  }

  /**
   * Update the property of an artifact
   *
   * @param uuid Identifier of the artifact (required)
   * @param committed New commit status of artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @return ApiResponse&lt;Artifact&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Artifact updated </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to update artifact </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Artifact not found </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<Artifact> updateArtifactWithHttpInfo(
      String uuid, Boolean committed, String namespace) throws ApiException {
    okhttp3.Call localVarCall = updateArtifactValidateBeforeCall(uuid, committed, namespace, null);
    Type localVarReturnType = new TypeToken<Artifact>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Update the property of an artifact (asynchronously)
   *
   * @param uuid Identifier of the artifact (required)
   * @param committed New commit status of artifact (required)
   * @param namespace Namespace of the artifacts (optional, default to lockss)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> Artifact updated </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized request </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Client not authorized to update artifact </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Artifact not found </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call updateArtifactAsync(String uuid, Boolean committed, String namespace,
      final ApiCallback<Artifact> _callback) throws ApiException {
    okhttp3.Call localVarCall =
        updateArtifactValidateBeforeCall(uuid, committed, namespace, _callback);
    Type localVarReturnType = new TypeToken<Artifact>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}
