/*
 * LOCKSS Configuration Service REST API
 * REST API of the LOCKSS Configuration Service
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.lockss.laaws.api.cfg;

import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.lockss.laaws.client.ApiCallback;
import org.lockss.laaws.client.ApiException;
import org.lockss.laaws.client.ApiResponse;
import org.lockss.laaws.client.Configuration;
import org.lockss.laaws.client.Pair;
import org.lockss.laaws.client.V2RestClient;
import org.lockss.laaws.model.cfg.PluginWsResult;

public class PluginsApi {

  private V2RestClient apiClient;

  public PluginsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public PluginsApi(V2RestClient apiClient) {
    this.apiClient = apiClient;
  }

  public V2RestClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(V2RestClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for getPlugins
   *
   * @param pluginQuery The query that specifies the plugins to be returned (required)
   * @param _callback   Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested plugins </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getPluginsCall(String pluginQuery, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/plugins";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (pluginQuery != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("pluginQuery", pluginQuery));
    }

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getPluginsValidateBeforeCall(String pluginQuery, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'pluginQuery' is set
    if (pluginQuery == null) {
      throw new ApiException(
        "Missing the required parameter 'pluginQuery' when calling getPlugins(Async)");
    }

    okhttp3.Call localVarCall = getPluginsCall(pluginQuery, _callback);
    return localVarCall;

  }

  /**
   * Query for plugin properties
   * Query for plugins that meet a set of specified conditions
   *
   * @param pluginQuery The query that specifies the plugins to be returned (required)
   * @return List&lt;PluginWsResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested plugins </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public List<PluginWsResult> getPlugins(String pluginQuery) throws ApiException {
    ApiResponse<List<PluginWsResult>> localVarResp = getPluginsWithHttpInfo(pluginQuery);
    return localVarResp.getData();
  }

  /**
   * Query for plugin properties
   * Query for plugins that meet a set of specified conditions
   *
   * @param pluginQuery The query that specifies the plugins to be returned (required)
   * @return ApiResponse&lt;List&lt;PluginWsResult&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested plugins </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<PluginWsResult>> getPluginsWithHttpInfo(String pluginQuery)
    throws ApiException {
    okhttp3.Call localVarCall = getPluginsValidateBeforeCall(pluginQuery, null);
    Type localVarReturnType = new TypeToken<List<PluginWsResult>>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Query for plugin properties (asynchronously)
   * Query for plugins that meet a set of specified conditions
   *
   * @param pluginQuery The query that specifies the plugins to be returned (required)
   * @param _callback   The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested plugins </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getPluginsAsync(String pluginQuery,
    final ApiCallback<List<PluginWsResult>> _callback) throws ApiException {

    okhttp3.Call localVarCall = getPluginsValidateBeforeCall(pluginQuery, _callback);
    Type localVarReturnType = new TypeToken<List<PluginWsResult>>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}
