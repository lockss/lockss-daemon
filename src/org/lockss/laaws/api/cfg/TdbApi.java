/*
 * LOCKSS Configuration Service REST API
 * REST API of the LOCKSS Configuration Service
 *
 * OpenAPI spec version: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.lockss.laaws.api.cfg;

import org.lockss.laaws.client.ApiCallback;
import org.lockss.laaws.client.V2RestClient;
import org.lockss.laaws.client.ApiException;
import org.lockss.laaws.client.ApiResponse;
import org.lockss.laaws.client.RestConfigConfiguration;
import org.lockss.laaws.client.Pair;
import org.lockss.laaws.client.ProgressRequestBody;
import org.lockss.laaws.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.lockss.laaws.model.cfg.TdbAuWsResult;
import org.lockss.laaws.model.cfg.TdbPublisherWsResult;
import org.lockss.laaws.model.cfg.TdbTitleWsResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TdbApi {
    private V2RestClient apiClient;

    public TdbApi() {
        this(RestConfigConfiguration.getDefaultApiClient());
    }

    public TdbApi(V2RestClient apiClient) {
        this.apiClient = apiClient;
    }

    public V2RestClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(V2RestClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getTdbAus
     * @param tdbAuQuery The query that specifies the TDB AUs to be returned (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTdbAusCall(String tdbAuQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tdbaus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tdbAuQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tdbAuQuery", tdbAuQuery));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTdbAusValidateBeforeCall(String tdbAuQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tdbAuQuery' is set
        if (tdbAuQuery == null) {
            throw new ApiException("Missing the required parameter 'tdbAuQuery' when calling getTdbAus(Async)");
        }
        
        com.squareup.okhttp.Call call = getTdbAusCall(tdbAuQuery, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query the TDB for AUs
     * Query the TDB for AUs that meet a set of specified conditions
     * @param tdbAuQuery The query that specifies the TDB AUs to be returned (required)
     * @return List&lt;TdbAuWsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TdbAuWsResult> getTdbAus(String tdbAuQuery) throws ApiException {
        ApiResponse<List<TdbAuWsResult>> resp = getTdbAusWithHttpInfo(tdbAuQuery);
        return resp.getData();
    }

    /**
     * Query the TDB for AUs
     * Query the TDB for AUs that meet a set of specified conditions
     * @param tdbAuQuery The query that specifies the TDB AUs to be returned (required)
     * @return ApiResponse&lt;List&lt;TdbAuWsResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TdbAuWsResult>> getTdbAusWithHttpInfo(String tdbAuQuery) throws ApiException {
        com.squareup.okhttp.Call call = getTdbAusValidateBeforeCall(tdbAuQuery, null, null);
        Type localVarReturnType = new TypeToken<List<TdbAuWsResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query the TDB for AUs (asynchronously)
     * Query the TDB for AUs that meet a set of specified conditions
     * @param tdbAuQuery The query that specifies the TDB AUs to be returned (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTdbAusAsync(String tdbAuQuery, final ApiCallback<List<TdbAuWsResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTdbAusValidateBeforeCall(tdbAuQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TdbAuWsResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTdbPublishers
     * @param tdbPublisherQuery The query that specifies the TDB Publishers to be\\ \\ returned (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTdbPublishersCall(String tdbPublisherQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tdbpublishers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tdbPublisherQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tdbPublisherQuery", tdbPublisherQuery));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTdbPublishersValidateBeforeCall(String tdbPublisherQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tdbPublisherQuery' is set
        if (tdbPublisherQuery == null) {
            throw new ApiException("Missing the required parameter 'tdbPublisherQuery' when calling getTdbPublishers(Async)");
        }
        
        com.squareup.okhttp.Call call = getTdbPublishersCall(tdbPublisherQuery, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query the TDB for Publishers
     * Query the TDB for Publishers that meet a set of specified\\ \\ conditions
     * @param tdbPublisherQuery The query that specifies the TDB Publishers to be\\ \\ returned (required)
     * @return List&lt;TdbPublisherWsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TdbPublisherWsResult> getTdbPublishers(String tdbPublisherQuery) throws ApiException {
        ApiResponse<List<TdbPublisherWsResult>> resp = getTdbPublishersWithHttpInfo(tdbPublisherQuery);
        return resp.getData();
    }

    /**
     * Query the TDB for Publishers
     * Query the TDB for Publishers that meet a set of specified\\ \\ conditions
     * @param tdbPublisherQuery The query that specifies the TDB Publishers to be\\ \\ returned (required)
     * @return ApiResponse&lt;List&lt;TdbPublisherWsResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TdbPublisherWsResult>> getTdbPublishersWithHttpInfo(String tdbPublisherQuery) throws ApiException {
        com.squareup.okhttp.Call call = getTdbPublishersValidateBeforeCall(tdbPublisherQuery, null, null);
        Type localVarReturnType = new TypeToken<List<TdbPublisherWsResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query the TDB for Publishers (asynchronously)
     * Query the TDB for Publishers that meet a set of specified\\ \\ conditions
     * @param tdbPublisherQuery The query that specifies the TDB Publishers to be\\ \\ returned (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTdbPublishersAsync(String tdbPublisherQuery, final ApiCallback<List<TdbPublisherWsResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTdbPublishersValidateBeforeCall(tdbPublisherQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TdbPublisherWsResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTdbTitles
     * @param tdbTitleQuery The query that specifies the TDB Titles to be returned (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTdbTitlesCall(String tdbTitleQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tdbtitles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tdbTitleQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tdbTitleQuery", tdbTitleQuery));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTdbTitlesValidateBeforeCall(String tdbTitleQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'tdbTitleQuery' is set
        if (tdbTitleQuery == null) {
            throw new ApiException("Missing the required parameter 'tdbTitleQuery' when calling getTdbTitles(Async)");
        }
        
        com.squareup.okhttp.Call call = getTdbTitlesCall(tdbTitleQuery, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query the TDB for Titles
     * Query the TDB for Titles that meet a set of specified\\ \\ conditions
     * @param tdbTitleQuery The query that specifies the TDB Titles to be returned (required)
     * @return List&lt;TdbTitleWsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TdbTitleWsResult> getTdbTitles(String tdbTitleQuery) throws ApiException {
        ApiResponse<List<TdbTitleWsResult>> resp = getTdbTitlesWithHttpInfo(tdbTitleQuery);
        return resp.getData();
    }

    /**
     * Query the TDB for Titles
     * Query the TDB for Titles that meet a set of specified\\ \\ conditions
     * @param tdbTitleQuery The query that specifies the TDB Titles to be returned (required)
     * @return ApiResponse&lt;List&lt;TdbTitleWsResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TdbTitleWsResult>> getTdbTitlesWithHttpInfo(String tdbTitleQuery) throws ApiException {
        com.squareup.okhttp.Call call = getTdbTitlesValidateBeforeCall(tdbTitleQuery, null, null);
        Type localVarReturnType = new TypeToken<List<TdbTitleWsResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query the TDB for Titles (asynchronously)
     * Query the TDB for Titles that meet a set of specified\\ \\ conditions
     * @param tdbTitleQuery The query that specifies the TDB Titles to be returned (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTdbTitlesAsync(String tdbTitleQuery, final ApiCallback<List<TdbTitleWsResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTdbTitlesValidateBeforeCall(tdbTitleQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TdbTitleWsResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
