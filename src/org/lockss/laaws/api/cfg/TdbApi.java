/*
 * LOCKSS Configuration Service REST API
 * REST API of the LOCKSS Configuration Service
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.lockss.laaws.api.cfg;

import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.lockss.laaws.client.ApiCallback;
import org.lockss.laaws.client.ApiException;
import org.lockss.laaws.client.ApiResponse;
import org.lockss.laaws.client.Configuration;
import org.lockss.laaws.client.Pair;
import org.lockss.laaws.client.V2RestClient;
import org.lockss.laaws.model.cfg.TdbAuWsResult;
import org.lockss.laaws.model.cfg.TdbPublisherWsResult;
import org.lockss.laaws.model.cfg.TdbTitleWsResult;

public class TdbApi {

  private V2RestClient apiClient;

  public TdbApi() {
    this(Configuration.getDefaultApiClient());
  }

  public TdbApi(V2RestClient apiClient) {
    this.apiClient = apiClient;
  }

  public V2RestClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(V2RestClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for getTdbAus
   *
   * @param tdbAuQuery The query that specifies the TDB AUs to be returned (required)
   * @param _callback  Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested TDB AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getTdbAusCall(String tdbAuQuery, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/tdbaus";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (tdbAuQuery != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("tdbAuQuery", tdbAuQuery));
    }

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getTdbAusValidateBeforeCall(String tdbAuQuery, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'tdbAuQuery' is set
    if (tdbAuQuery == null) {
      throw new ApiException(
        "Missing the required parameter 'tdbAuQuery' when calling getTdbAus(Async)");
    }

    okhttp3.Call localVarCall = getTdbAusCall(tdbAuQuery, _callback);
    return localVarCall;

  }

  /**
   * Query the TDB for AUs
   * Query the TDB for AUs that meet a set of specified conditions
   *
   * @param tdbAuQuery The query that specifies the TDB AUs to be returned (required)
   * @return List&lt;TdbAuWsResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested TDB AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public List<TdbAuWsResult> getTdbAus(String tdbAuQuery) throws ApiException {
    ApiResponse<List<TdbAuWsResult>> localVarResp = getTdbAusWithHttpInfo(tdbAuQuery);
    return localVarResp.getData();
  }

  /**
   * Query the TDB for AUs
   * Query the TDB for AUs that meet a set of specified conditions
   *
   * @param tdbAuQuery The query that specifies the TDB AUs to be returned (required)
   * @return ApiResponse&lt;List&lt;TdbAuWsResult&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested TDB AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<TdbAuWsResult>> getTdbAusWithHttpInfo(String tdbAuQuery)
    throws ApiException {
    okhttp3.Call localVarCall = getTdbAusValidateBeforeCall(tdbAuQuery, null);
    Type localVarReturnType = new TypeToken<List<TdbAuWsResult>>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Query the TDB for AUs (asynchronously)
   * Query the TDB for AUs that meet a set of specified conditions
   *
   * @param tdbAuQuery The query that specifies the TDB AUs to be returned (required)
   * @param _callback  The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested TDB AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getTdbAusAsync(String tdbAuQuery,
    final ApiCallback<List<TdbAuWsResult>> _callback) throws ApiException {

    okhttp3.Call localVarCall = getTdbAusValidateBeforeCall(tdbAuQuery, _callback);
    Type localVarReturnType = new TypeToken<List<TdbAuWsResult>>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getTdbPublishers
   *
   * @param tdbPublisherQuery The query that specifies the TDB Publishers to be\\ \\ returned (required)
   * @param _callback         Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested TDB Publishers </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getTdbPublishersCall(String tdbPublisherQuery, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/tdbpublishers";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (tdbPublisherQuery != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("tdbPublisherQuery", tdbPublisherQuery));
    }

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getTdbPublishersValidateBeforeCall(String tdbPublisherQuery,
    final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'tdbPublisherQuery' is set
    if (tdbPublisherQuery == null) {
      throw new ApiException(
        "Missing the required parameter 'tdbPublisherQuery' when calling getTdbPublishers(Async)");
    }

    okhttp3.Call localVarCall = getTdbPublishersCall(tdbPublisherQuery, _callback);
    return localVarCall;

  }

  /**
   * Query the TDB for Publishers
   * Query the TDB for Publishers that meet a set of specified\\ \\ conditions
   *
   * @param tdbPublisherQuery The query that specifies the TDB Publishers to be\\ \\ returned (required)
   * @return List&lt;TdbPublisherWsResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested TDB Publishers </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public List<TdbPublisherWsResult> getTdbPublishers(String tdbPublisherQuery) throws ApiException {
    ApiResponse<List<TdbPublisherWsResult>> localVarResp = getTdbPublishersWithHttpInfo(
      tdbPublisherQuery);
    return localVarResp.getData();
  }

  /**
   * Query the TDB for Publishers
   * Query the TDB for Publishers that meet a set of specified\\ \\ conditions
   *
   * @param tdbPublisherQuery The query that specifies the TDB Publishers to be\\ \\ returned (required)
   * @return ApiResponse&lt;List&lt;TdbPublisherWsResult&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested TDB Publishers </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<TdbPublisherWsResult>> getTdbPublishersWithHttpInfo(
    String tdbPublisherQuery) throws ApiException {
    okhttp3.Call localVarCall = getTdbPublishersValidateBeforeCall(tdbPublisherQuery, null);
    Type localVarReturnType = new TypeToken<List<TdbPublisherWsResult>>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Query the TDB for Publishers (asynchronously)
   * Query the TDB for Publishers that meet a set of specified\\ \\ conditions
   *
   * @param tdbPublisherQuery The query that specifies the TDB Publishers to be\\ \\ returned (required)
   * @param _callback         The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested TDB Publishers </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getTdbPublishersAsync(String tdbPublisherQuery,
    final ApiCallback<List<TdbPublisherWsResult>> _callback) throws ApiException {

    okhttp3.Call localVarCall = getTdbPublishersValidateBeforeCall(tdbPublisherQuery, _callback);
    Type localVarReturnType = new TypeToken<List<TdbPublisherWsResult>>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getTdbTitles
   *
   * @param tdbTitleQuery The query that specifies the TDB Titles to be returned (required)
   * @param _callback     Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested TDB Titles </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getTdbTitlesCall(String tdbTitleQuery, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/tdbtitles";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (tdbTitleQuery != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("tdbTitleQuery", tdbTitleQuery));
    }

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getTdbTitlesValidateBeforeCall(String tdbTitleQuery,
    final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'tdbTitleQuery' is set
    if (tdbTitleQuery == null) {
      throw new ApiException(
        "Missing the required parameter 'tdbTitleQuery' when calling getTdbTitles(Async)");
    }

    okhttp3.Call localVarCall = getTdbTitlesCall(tdbTitleQuery, _callback);
    return localVarCall;

  }

  /**
   * Query the TDB for Titles
   * Query the TDB for Titles that meet a set of specified\\ \\ conditions
   *
   * @param tdbTitleQuery The query that specifies the TDB Titles to be returned (required)
   * @return List&lt;TdbTitleWsResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested TDB Titles </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public List<TdbTitleWsResult> getTdbTitles(String tdbTitleQuery) throws ApiException {
    ApiResponse<List<TdbTitleWsResult>> localVarResp = getTdbTitlesWithHttpInfo(tdbTitleQuery);
    return localVarResp.getData();
  }

  /**
   * Query the TDB for Titles
   * Query the TDB for Titles that meet a set of specified\\ \\ conditions
   *
   * @param tdbTitleQuery The query that specifies the TDB Titles to be returned (required)
   * @return ApiResponse&lt;List&lt;TdbTitleWsResult&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested TDB Titles </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<TdbTitleWsResult>> getTdbTitlesWithHttpInfo(String tdbTitleQuery)
    throws ApiException {
    okhttp3.Call localVarCall = getTdbTitlesValidateBeforeCall(tdbTitleQuery, null);
    Type localVarReturnType = new TypeToken<List<TdbTitleWsResult>>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Query the TDB for Titles (asynchronously)
   * Query the TDB for Titles that meet a set of specified\\ \\ conditions
   *
   * @param tdbTitleQuery The query that specifies the TDB Titles to be returned (required)
   * @param _callback     The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested TDB Titles </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getTdbTitlesAsync(String tdbTitleQuery,
    final ApiCallback<List<TdbTitleWsResult>> _callback) throws ApiException {

    okhttp3.Call localVarCall = getTdbTitlesValidateBeforeCall(tdbTitleQuery, _callback);
    Type localVarReturnType = new TypeToken<List<TdbTitleWsResult>>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}
