/*
 * Copyright (c) 2000-2022, Board of Trustees of Leland Stanford Jr. University
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * LOCKSS Configuration Service REST API
 * REST API of the LOCKSS Configuration Service
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.lockss.laaws.api.cfg;

import com.google.gson.reflect.TypeToken;
import java.io.File;
import java.lang.reflect.Type;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.lockss.laaws.client.*;
import org.lockss.laaws.model.cfg.PlatformConfigurationWsResult;

public class ConfigApi {
  private V2RestClient apiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public ConfigApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ConfigApi(V2RestClient apiClient) {
    this.apiClient = apiClient;
  }

  public V2RestClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(V2RestClient apiClient) {
    this.apiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for getLastUpdateTime
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The timestamp when the configuration was last updated </td><td>  -
   </td></tr> <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr> <tr><td> 500 </td><td>
   Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getLastUpdateTimeCall(final ApiCallback _callback) throws ApiException {
    String basePath = null;

    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/config/lastupdatetime";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getLastUpdateTimeValidateBeforeCall(final ApiCallback _callback)
      throws ApiException {
    okhttp3.Call localVarCall = getLastUpdateTimeCall(_callback);
    return localVarCall;
  }

  /**
   * Get the timestamp when the configuration was last updated
   * Get the timestamp when the configuration was last updated
   * @return OffsetDateTime
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The timestamp when the configuration was last updated </td><td>  -
   </td></tr> <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr> <tr><td> 500 </td><td>
   Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public OffsetDateTime getLastUpdateTime() throws ApiException {
    ApiResponse<OffsetDateTime> localVarResp = getLastUpdateTimeWithHttpInfo();
    return localVarResp.getData();
  }

  /**
   * Get the timestamp when the configuration was last updated
   * Get the timestamp when the configuration was last updated
   * @return ApiResponse&lt;OffsetDateTime&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The timestamp when the configuration was last updated </td><td>  -
   </td></tr> <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr> <tr><td> 500 </td><td>
   Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<OffsetDateTime> getLastUpdateTimeWithHttpInfo() throws ApiException {
    okhttp3.Call localVarCall = getLastUpdateTimeValidateBeforeCall(null);
    Type localVarReturnType = new TypeToken<OffsetDateTime>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the timestamp when the configuration was last updated (asynchronously)
   * Get the timestamp when the configuration was last updated
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The timestamp when the configuration was last updated </td><td>  -
   </td></tr> <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr> <tr><td> 500 </td><td>
   Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getLastUpdateTimeAsync(final ApiCallback<OffsetDateTime> _callback)
      throws ApiException {
    okhttp3.Call localVarCall = getLastUpdateTimeValidateBeforeCall(_callback);
    Type localVarReturnType = new TypeToken<OffsetDateTime>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getLoadedUrlList
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The URLs from which the configuration was loaded </td><td>  -
   </td></tr> <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr> <tr><td> 500 </td><td>
   Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getLoadedUrlListCall(final ApiCallback _callback) throws ApiException {
    String basePath = null;

    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/config/loadedurls";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getLoadedUrlListValidateBeforeCall(final ApiCallback _callback)
      throws ApiException {
    okhttp3.Call localVarCall = getLoadedUrlListCall(_callback);
    return localVarCall;
  }

  /**
   * Get the URLs from which the configuration was loaded
   * Get the URLs from which the configuration was actually\\ \\ loaded, reflecting any failover to
   local copies
   * @return List&lt;String&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The URLs from which the configuration was loaded </td><td>  -
   </td></tr> <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr> <tr><td> 500 </td><td>
   Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public List<String> getLoadedUrlList() throws ApiException {
    ApiResponse<List<String>> localVarResp = getLoadedUrlListWithHttpInfo();
    return localVarResp.getData();
  }

  /**
   * Get the URLs from which the configuration was loaded
   * Get the URLs from which the configuration was actually\\ \\ loaded, reflecting any failover to
   local copies
   * @return ApiResponse&lt;List&lt;String&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The URLs from which the configuration was loaded </td><td>  -
   </td></tr> <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr> <tr><td> 500 </td><td>
   Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<List<String>> getLoadedUrlListWithHttpInfo() throws ApiException {
    okhttp3.Call localVarCall = getLoadedUrlListValidateBeforeCall(null);
    Type localVarReturnType = new TypeToken<List<String>>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the URLs from which the configuration was loaded (asynchronously)
   * Get the URLs from which the configuration was actually\\ \\ loaded, reflecting any failover to
   local copies
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The URLs from which the configuration was loaded </td><td>  -
   </td></tr> <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr> <tr><td> 500 </td><td>
   Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getLoadedUrlListAsync(final ApiCallback<List<String>> _callback)
      throws ApiException {
    okhttp3.Call localVarCall = getLoadedUrlListValidateBeforeCall(_callback);
    Type localVarReturnType = new TypeToken<List<String>>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getPlatformConfig
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The platform configuration </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getPlatformConfigCall(final ApiCallback _callback) throws ApiException {
    String basePath = null;

    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/config/platform";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getPlatformConfigValidateBeforeCall(final ApiCallback _callback)
      throws ApiException {
    okhttp3.Call localVarCall = getPlatformConfigCall(_callback);
    return localVarCall;
  }

  /**
   * Get the platform configuration
   * Get the platform configuration
   * @return PlatformConfigurationWsResult
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The platform configuration </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public PlatformConfigurationWsResult getPlatformConfig() throws ApiException {
    ApiResponse<PlatformConfigurationWsResult> localVarResp = getPlatformConfigWithHttpInfo();
    return localVarResp.getData();
  }

  /**
   * Get the platform configuration
   * Get the platform configuration
   * @return ApiResponse&lt;PlatformConfigurationWsResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The platform configuration </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<PlatformConfigurationWsResult> getPlatformConfigWithHttpInfo()
      throws ApiException {
    okhttp3.Call localVarCall = getPlatformConfigValidateBeforeCall(null);
    Type localVarReturnType = new TypeToken<PlatformConfigurationWsResult>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the platform configuration (asynchronously)
   * Get the platform configuration
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The platform configuration </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getPlatformConfigAsync(
      final ApiCallback<PlatformConfigurationWsResult> _callback) throws ApiException {
    okhttp3.Call localVarCall = getPlatformConfigValidateBeforeCall(_callback);
    Type localVarReturnType = new TypeToken<PlatformConfigurationWsResult>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getSectionConfig
   * @param sectionName The name of the section for which the configuration file\\ \\ is requested
   (required)
   * @param ifMatch The If-Match header (optional)
   * @param ifModifiedSince The If-Match header (optional)
   * @param ifNoneMatch The If-Match header (optional)
   * @param ifUnmodifiedSince The If-Match header (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The named configuration file </td><td>  -  </td></tr>
      <tr><td> 304 </td><td> Not Modified </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
      <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
      <tr><td> 412 </td><td> Precondition failed </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getSectionConfigCall(String sectionName, String ifMatch,
      String ifModifiedSince, String ifNoneMatch, String ifUnmodifiedSince,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;

    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/config/file/{sectionName}".replaceAll("\\{"
            + "sectionName"
            + "\\}",
        apiClient.escapeString(sectionName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (ifMatch != null) {
      localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));
    }

    if (ifModifiedSince != null) {
      localVarHeaderParams.put(
          "If-Modified-Since", apiClient.parameterToString(ifModifiedSince));
    }

    if (ifNoneMatch != null) {
      localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));
    }

    if (ifUnmodifiedSince != null) {
      localVarHeaderParams.put(
          "If-Unmodified-Since", apiClient.parameterToString(ifUnmodifiedSince));
    }

    final String[] localVarAccepts = {"multipart/form-data"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getSectionConfigValidateBeforeCall(String sectionName, String ifMatch,
      String ifModifiedSince, String ifNoneMatch, String ifUnmodifiedSince,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'sectionName' is set
    if (sectionName == null) {
      throw new ApiException(
          "Missing the required parameter 'sectionName' when calling getSectionConfig(Async)");
    }

    okhttp3.Call localVarCall = getSectionConfigCall(
        sectionName, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince, _callback);
    return localVarCall;
  }

  /**
   * Get the named configuration file
   * Get the configuration file stored for a given name
   * @param sectionName The name of the section for which the configuration file\\ \\ is requested
   (required)
   * @param ifMatch The If-Match header (optional)
   * @param ifModifiedSince The If-Match header (optional)
   * @param ifNoneMatch The If-Match header (optional)
   * @param ifUnmodifiedSince The If-Match header (optional)
   * @return File
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The named configuration file </td><td>  -  </td></tr>
      <tr><td> 304 </td><td> Not Modified </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
      <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
      <tr><td> 412 </td><td> Precondition failed </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public File getSectionConfig(String sectionName, String ifMatch, String ifModifiedSince,
      String ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
    ApiResponse<File> localVarResp = getSectionConfigWithHttpInfo(
        sectionName, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince);
    return localVarResp.getData();
  }

  /**
   * Get the named configuration file
   * Get the configuration file stored for a given name
   * @param sectionName The name of the section for which the configuration file\\ \\ is requested
   (required)
   * @param ifMatch The If-Match header (optional)
   * @param ifModifiedSince The If-Match header (optional)
   * @param ifNoneMatch The If-Match header (optional)
   * @param ifUnmodifiedSince The If-Match header (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The named configuration file </td><td>  -  </td></tr>
      <tr><td> 304 </td><td> Not Modified </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
      <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
      <tr><td> 412 </td><td> Precondition failed </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<File> getSectionConfigWithHttpInfo(String sectionName, String ifMatch,
      String ifModifiedSince, String ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
    okhttp3.Call localVarCall = getSectionConfigValidateBeforeCall(
        sectionName, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince, null);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the named configuration file (asynchronously)
   * Get the configuration file stored for a given name
   * @param sectionName The name of the section for which the configuration file\\ \\ is requested
   (required)
   * @param ifMatch The If-Match header (optional)
   * @param ifModifiedSince The If-Match header (optional)
   * @param ifNoneMatch The If-Match header (optional)
   * @param ifUnmodifiedSince The If-Match header (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The named configuration file </td><td>  -  </td></tr>
      <tr><td> 304 </td><td> Not Modified </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
      <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
      <tr><td> 412 </td><td> Precondition failed </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getSectionConfigAsync(String sectionName, String ifMatch,
      String ifModifiedSince, String ifNoneMatch, String ifUnmodifiedSince,
      final ApiCallback<File> _callback) throws ApiException {
    okhttp3.Call localVarCall = getSectionConfigValidateBeforeCall(
        sectionName, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince, _callback);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for getUrlConfig
   * @param url The URL for which the configuration is requested (required)
   * @param ifMatch The If-Match header (optional)
   * @param ifModifiedSince The If-Match header (optional)
   * @param ifNoneMatch The If-Match header (optional)
   * @param ifUnmodifiedSince The If-Match header (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The configuration file for the URL </td><td>  -  </td></tr>
      <tr><td> 304 </td><td> Not Modified </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
      <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
      <tr><td> 412 </td><td> Precondition failed </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getUrlConfigCall(String url, String ifMatch, String ifModifiedSince,
      String ifNoneMatch, String ifUnmodifiedSince, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;

    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/config/url";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (url != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("url", url));
    }

    if (ifMatch != null) {
      localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));
    }

    if (ifModifiedSince != null) {
      localVarHeaderParams.put(
          "If-Modified-Since", apiClient.parameterToString(ifModifiedSince));
    }

    if (ifNoneMatch != null) {
      localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));
    }

    if (ifUnmodifiedSince != null) {
      localVarHeaderParams.put(
          "If-Unmodified-Since", apiClient.parameterToString(ifUnmodifiedSince));
    }

    final String[] localVarAccepts = {"multipart/form-data"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getUrlConfigValidateBeforeCall(String url, String ifMatch,
      String ifModifiedSince, String ifNoneMatch, String ifUnmodifiedSince,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
      throw new ApiException(
          "Missing the required parameter 'url' when calling getUrlConfig(Async)");
    }

    okhttp3.Call localVarCall =
        getUrlConfigCall(url, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince, _callback);
    return localVarCall;
  }

  /**
   * Get the configuration file for a URL
   * Get the configuration file stored for a given URL
   * @param url The URL for which the configuration is requested (required)
   * @param ifMatch The If-Match header (optional)
   * @param ifModifiedSince The If-Match header (optional)
   * @param ifNoneMatch The If-Match header (optional)
   * @param ifUnmodifiedSince The If-Match header (optional)
   * @return File
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The configuration file for the URL </td><td>  -  </td></tr>
      <tr><td> 304 </td><td> Not Modified </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
      <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
      <tr><td> 412 </td><td> Precondition failed </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public File getUrlConfig(String url, String ifMatch, String ifModifiedSince, String ifNoneMatch,
      String ifUnmodifiedSince) throws ApiException {
    ApiResponse<File> localVarResp =
        getUrlConfigWithHttpInfo(url, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince);
    return localVarResp.getData();
  }

  /**
   * Get the configuration file for a URL
   * Get the configuration file stored for a given URL
   * @param url The URL for which the configuration is requested (required)
   * @param ifMatch The If-Match header (optional)
   * @param ifModifiedSince The If-Match header (optional)
   * @param ifNoneMatch The If-Match header (optional)
   * @param ifUnmodifiedSince The If-Match header (optional)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The configuration file for the URL </td><td>  -  </td></tr>
      <tr><td> 304 </td><td> Not Modified </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
      <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
      <tr><td> 412 </td><td> Precondition failed </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<File> getUrlConfigWithHttpInfo(String url, String ifMatch,
      String ifModifiedSince, String ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
    okhttp3.Call localVarCall = getUrlConfigValidateBeforeCall(
        url, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince, null);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the configuration file for a URL (asynchronously)
   * Get the configuration file stored for a given URL
   * @param url The URL for which the configuration is requested (required)
   * @param ifMatch The If-Match header (optional)
   * @param ifModifiedSince The If-Match header (optional)
   * @param ifNoneMatch The If-Match header (optional)
   * @param ifUnmodifiedSince The If-Match header (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> The configuration file for the URL </td><td>  -  </td></tr>
      <tr><td> 304 </td><td> Not Modified </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
      <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
      <tr><td> 412 </td><td> Precondition failed </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call getUrlConfigAsync(String url, String ifMatch, String ifModifiedSince,
      String ifNoneMatch, String ifUnmodifiedSince, final ApiCallback<File> _callback)
      throws ApiException {
    okhttp3.Call localVarCall = getUrlConfigValidateBeforeCall(
        url, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince, _callback);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for putConfig
   * @param sectionName The name of the section for which the configuration file\\ \\ is to be
   stored (required)
   * @param configFile The configuration file to be stored (required)
   * @param ifMatch The If-Match header (optional)
   * @param ifModifiedSince The If-Match header (optional)
   * @param ifNoneMatch The If-Match header (optional)
   * @param ifUnmodifiedSince The If-Match header (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
      <tr><td> 412 </td><td> Precondition failed </td><td>  -  </td></tr>
      <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call putConfigCall(String sectionName, File configFile, String ifMatch,
      String ifModifiedSince, String ifNoneMatch, String ifUnmodifiedSince,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;

    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/config/file/{sectionName}".replaceAll("\\{"
            + "sectionName"
            + "\\}",
        apiClient.escapeString(sectionName.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (configFile != null) {
      localVarFormParams.put("configFile", configFile);
    }

    if (ifMatch != null) {
      localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));
    }

    if (ifModifiedSince != null) {
      localVarHeaderParams.put(
          "If-Modified-Since", apiClient.parameterToString(ifModifiedSince));
    }

    if (ifNoneMatch != null) {
      localVarHeaderParams.put("If-None-Match", apiClient.parameterToString(ifNoneMatch));
    }

    if (ifUnmodifiedSince != null) {
      localVarHeaderParams.put(
          "If-Unmodified-Since", apiClient.parameterToString(ifUnmodifiedSince));
    }

    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"multipart/form-data"};
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call putConfigValidateBeforeCall(String sectionName, File configFile,
      String ifMatch, String ifModifiedSince, String ifNoneMatch, String ifUnmodifiedSince,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'sectionName' is set
    if (sectionName == null) {
      throw new ApiException(
          "Missing the required parameter 'sectionName' when calling putConfig(Async)");
    }

    // verify the required parameter 'configFile' is set
    if (configFile == null) {
      throw new ApiException(
          "Missing the required parameter 'configFile' when calling putConfig(Async)");
    }

    okhttp3.Call localVarCall = putConfigCall(sectionName, configFile, ifMatch, ifModifiedSince,
        ifNoneMatch, ifUnmodifiedSince, _callback);
    return localVarCall;
  }

  /**
   * Store the named configuration file
   * Store the configuration file for a given name
   * @param sectionName The name of the section for which the configuration file\\ \\ is to be
   stored (required)
   * @param configFile The configuration file to be stored (required)
   * @param ifMatch The If-Match header (optional)
   * @param ifModifiedSince The If-Match header (optional)
   * @param ifNoneMatch The If-Match header (optional)
   * @param ifUnmodifiedSince The If-Match header (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
      <tr><td> 412 </td><td> Precondition failed </td><td>  -  </td></tr>
      <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public void putConfig(String sectionName, File configFile, String ifMatch, String ifModifiedSince,
      String ifNoneMatch, String ifUnmodifiedSince) throws ApiException {
    putConfigWithHttpInfo(
        sectionName, configFile, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince);
  }

  /**
   * Store the named configuration file
   * Store the configuration file for a given name
   * @param sectionName The name of the section for which the configuration file\\ \\ is to be
   stored (required)
   * @param configFile The configuration file to be stored (required)
   * @param ifMatch The If-Match header (optional)
   * @param ifModifiedSince The If-Match header (optional)
   * @param ifNoneMatch The If-Match header (optional)
   * @param ifUnmodifiedSince The If-Match header (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
      <tr><td> 412 </td><td> Precondition failed </td><td>  -  </td></tr>
      <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<Void> putConfigWithHttpInfo(String sectionName, File configFile,
      String ifMatch, String ifModifiedSince, String ifNoneMatch, String ifUnmodifiedSince)
      throws ApiException {
    okhttp3.Call localVarCall = putConfigValidateBeforeCall(
        sectionName, configFile, ifMatch, ifModifiedSince, ifNoneMatch, ifUnmodifiedSince, null);
    return apiClient.execute(localVarCall);
  }

  /**
   * Store the named configuration file (asynchronously)
   * Store the configuration file for a given name
   * @param sectionName The name of the section for which the configuration file\\ \\ is to be
   stored (required)
   * @param configFile The configuration file to be stored (required)
   * @param ifMatch The If-Match header (optional)
   * @param ifModifiedSince The If-Match header (optional)
   * @param ifNoneMatch The If-Match header (optional)
   * @param ifUnmodifiedSince The If-Match header (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
      <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
      <tr><td> 412 </td><td> Precondition failed </td><td>  -  </td></tr>
      <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call putConfigAsync(String sectionName, File configFile, String ifMatch,
      String ifModifiedSince, String ifNoneMatch, String ifUnmodifiedSince,
      final ApiCallback<Void> _callback) throws ApiException {
    okhttp3.Call localVarCall = putConfigValidateBeforeCall(sectionName, configFile, ifMatch,
        ifModifiedSince, ifNoneMatch, ifUnmodifiedSince, _callback);
    apiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
  /**
   * Build call for putConfigReload
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call putConfigReloadCall(final ApiCallback _callback) throws ApiException {
    String basePath = null;

    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/config/reload";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType =
        apiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"basicAuth"};
    return apiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call putConfigReloadValidateBeforeCall(final ApiCallback _callback)
      throws ApiException {
    okhttp3.Call localVarCall = putConfigReloadCall(_callback);
    return localVarCall;
  }

  /**
   * Request a configuration reload
   * Request that the stored configuration is reloaded
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public void putConfigReload() throws ApiException {
    putConfigReloadWithHttpInfo();
  }

  /**
   * Request a configuration reload
   * Request that the stored configuration is reloaded
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   response body
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public ApiResponse<Void> putConfigReloadWithHttpInfo() throws ApiException {
    okhttp3.Call localVarCall = putConfigReloadValidateBeforeCall(null);
    return apiClient.execute(localVarCall);
  }

  /**
   * Request a configuration reload (asynchronously)
   * Request that the stored configuration is reloaded
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   <table summary="Response Details" border="1">
      <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
      <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
      <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
      <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
      <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   </table>
   */
  public okhttp3.Call putConfigReloadAsync(final ApiCallback<Void> _callback) throws ApiException {
    okhttp3.Call localVarCall = putConfigReloadValidateBeforeCall(_callback);
    apiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
}
