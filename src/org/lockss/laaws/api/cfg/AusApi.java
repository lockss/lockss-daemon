/*
 * LOCKSS Configuration Service REST API
 * REST API of the LOCKSS Configuration Service
 *
 * OpenAPI spec version: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.lockss.laaws.api.cfg;

import org.lockss.laaws.client.ApiCallback;
import org.lockss.laaws.client.V2RestClient;
import org.lockss.laaws.client.ApiException;
import org.lockss.laaws.client.ApiResponse;
import org.lockss.laaws.client.RestConfigConfiguration;
import org.lockss.laaws.client.Pair;
import org.lockss.laaws.client.ProgressRequestBody;
import org.lockss.laaws.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.lockss.laaws.model.cfg.AuConfiguration;
import org.lockss.laaws.model.cfg.AuStatus;
import org.lockss.laaws.model.cfg.AuWsResult;
import org.lockss.laaws.model.cfg.CheckSubstanceResult;
import org.lockss.laaws.model.cfg.ContentConfigurationResult;
import org.lockss.laaws.model.cfg.RequestAuControlResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AusApi {
    private V2RestClient apiClient;

    public AusApi() {
        this(RestConfigConfiguration.getDefaultApiClient());
    }

    public AusApi(V2RestClient apiClient) {
        this.apiClient = apiClient;
    }

    public V2RestClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(V2RestClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteAuConfig
     * @param auid The identifier of the AU for which the configuration is\\ \\ to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAuConfigCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/aus/{auid}"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAuConfigValidateBeforeCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling deleteAuConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAuConfigCall(auid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete the configuration of an AU
     * Delete the configuration of an AU given the AU identifier
     * @param auid The identifier of the AU for which the configuration is\\ \\ to be deleted (required)
     * @return AuConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuConfiguration deleteAuConfig(String auid) throws ApiException {
        ApiResponse<AuConfiguration> resp = deleteAuConfigWithHttpInfo(auid);
        return resp.getData();
    }

    /**
     * Delete the configuration of an AU
     * Delete the configuration of an AU given the AU identifier
     * @param auid The identifier of the AU for which the configuration is\\ \\ to be deleted (required)
     * @return ApiResponse&lt;AuConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuConfiguration> deleteAuConfigWithHttpInfo(String auid) throws ApiException {
        com.squareup.okhttp.Call call = deleteAuConfigValidateBeforeCall(auid, null, null);
        Type localVarReturnType = new TypeToken<AuConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete the configuration of an AU (asynchronously)
     * Delete the configuration of an AU given the AU identifier
     * @param auid The identifier of the AU for which the configuration is\\ \\ to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAuConfigAsync(String auid, final ApiCallback<AuConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAuConfigValidateBeforeCall(auid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAusDelete
     * @param body The identifiers of the Archival Units to be deleted (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAusDeleteCall(List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/aus/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAusDeleteValidateBeforeCall(List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteAusDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteAusDeleteCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete AUs
     * Delete a group of AUs given their identifiers
     * @param body The identifiers of the Archival Units to be deleted (required)
     * @return List&lt;ContentConfigurationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContentConfigurationResult> deleteAusDelete(List<String> body) throws ApiException {
        ApiResponse<List<ContentConfigurationResult>> resp = deleteAusDeleteWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Delete AUs
     * Delete a group of AUs given their identifiers
     * @param body The identifiers of the Archival Units to be deleted (required)
     * @return ApiResponse&lt;List&lt;ContentConfigurationResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContentConfigurationResult>> deleteAusDeleteWithHttpInfo(List<String> body) throws ApiException {
        com.squareup.okhttp.Call call = deleteAusDeleteValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete AUs (asynchronously)
     * Delete a group of AUs given their identifiers
     * @param body The identifiers of the Archival Units to be deleted (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAusDeleteAsync(List<String> body, final ApiCallback<List<ContentConfigurationResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAusDeleteValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAllAuConfig
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllAuConfigCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/aus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllAuConfigValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getAllAuConfigCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the configurations of all AUs
     * Get the configuration of all AUs
     * @return List&lt;AuConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuConfiguration> getAllAuConfig() throws ApiException {
        ApiResponse<List<AuConfiguration>> resp = getAllAuConfigWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get the configurations of all AUs
     * Get the configuration of all AUs
     * @return ApiResponse&lt;List&lt;AuConfiguration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuConfiguration>> getAllAuConfigWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getAllAuConfigValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<AuConfiguration>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the configurations of all AUs (asynchronously)
     * Get the configuration of all AUs
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllAuConfigAsync(final ApiCallback<List<AuConfiguration>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllAuConfigValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuConfiguration>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuAgreements
     * @param auid The identifier of the AU for which the poll agreements\\ \\ are requested (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuAgreementsCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/auagreements/{auid}"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuAgreementsValidateBeforeCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling getAuAgreements(Async)");
        }
        
        com.squareup.okhttp.Call call = getAuAgreementsCall(auid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the poll agreements of an AU
     * Get the poll agreements of an AU given the AU identifier
     * @param auid The identifier of the AU for which the poll agreements\\ \\ are requested (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getAuAgreements(String auid) throws ApiException {
        ApiResponse<String> resp = getAuAgreementsWithHttpInfo(auid);
        return resp.getData();
    }

    /**
     * Get the poll agreements of an AU
     * Get the poll agreements of an AU given the AU identifier
     * @param auid The identifier of the AU for which the poll agreements\\ \\ are requested (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getAuAgreementsWithHttpInfo(String auid) throws ApiException {
        com.squareup.okhttp.Call call = getAuAgreementsValidateBeforeCall(auid, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the poll agreements of an AU (asynchronously)
     * Get the poll agreements of an AU given the AU identifier
     * @param auid The identifier of the AU for which the poll agreements\\ \\ are requested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuAgreementsAsync(String auid, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuAgreementsValidateBeforeCall(auid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuConfig
     * @param auid The identifier of the AU for which the configuration is\\ \\ requested (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuConfigCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/aus/{auid}"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuConfigValidateBeforeCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling getAuConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = getAuConfigCall(auid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the configuration of an AU
     * Get the configuration of an AU given the AU identifier
     * @param auid The identifier of the AU for which the configuration is\\ \\ requested (required)
     * @return AuConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuConfiguration getAuConfig(String auid) throws ApiException {
        ApiResponse<AuConfiguration> resp = getAuConfigWithHttpInfo(auid);
        return resp.getData();
    }

    /**
     * Get the configuration of an AU
     * Get the configuration of an AU given the AU identifier
     * @param auid The identifier of the AU for which the configuration is\\ \\ requested (required)
     * @return ApiResponse&lt;AuConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuConfiguration> getAuConfigWithHttpInfo(String auid) throws ApiException {
        com.squareup.okhttp.Call call = getAuConfigValidateBeforeCall(auid, null, null);
        Type localVarReturnType = new TypeToken<AuConfiguration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the configuration of an AU (asynchronously)
     * Get the configuration of an AU given the AU identifier
     * @param auid The identifier of the AU for which the configuration is\\ \\ requested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuConfigAsync(String auid, final ApiCallback<AuConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuConfigValidateBeforeCall(auid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuConfiguration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuState
     * @param auid The identifier of the AU for which the state is requested (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuStateCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/austates/{auid}"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuStateValidateBeforeCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling getAuState(Async)");
        }
        
        com.squareup.okhttp.Call call = getAuStateCall(auid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the state of an AU
     * Get the state of an AU given the AU identifier
     * @param auid The identifier of the AU for which the state is requested (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getAuState(String auid) throws ApiException {
        ApiResponse<String> resp = getAuStateWithHttpInfo(auid);
        return resp.getData();
    }

    /**
     * Get the state of an AU
     * Get the state of an AU given the AU identifier
     * @param auid The identifier of the AU for which the state is requested (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getAuStateWithHttpInfo(String auid) throws ApiException {
        com.squareup.okhttp.Call call = getAuStateValidateBeforeCall(auid, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the state of an AU (asynchronously)
     * Get the state of an AU given the AU identifier
     * @param auid The identifier of the AU for which the state is requested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuStateAsync(String auid, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuStateValidateBeforeCall(auid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuStatus
     * @param auid The identifier of the AU for which the status is\\ \\ requested (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuStatusCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/austatuses/{auid}"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuStatusValidateBeforeCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling getAuStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = getAuStatusCall(auid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the status of an AU
     * Get the status of an AU given the AU identifier
     * @param auid The identifier of the AU for which the status is\\ \\ requested (required)
     * @return AuStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuStatus getAuStatus(String auid) throws ApiException {
        ApiResponse<AuStatus> resp = getAuStatusWithHttpInfo(auid);
        return resp.getData();
    }

    /**
     * Get the status of an AU
     * Get the status of an AU given the AU identifier
     * @param auid The identifier of the AU for which the status is\\ \\ requested (required)
     * @return ApiResponse&lt;AuStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuStatus> getAuStatusWithHttpInfo(String auid) throws ApiException {
        com.squareup.okhttp.Call call = getAuStatusValidateBeforeCall(auid, null, null);
        Type localVarReturnType = new TypeToken<AuStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the status of an AU (asynchronously)
     * Get the status of an AU given the AU identifier
     * @param auid The identifier of the AU for which the status is\\ \\ requested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuStatusAsync(String auid, final ApiCallback<AuStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuStatusValidateBeforeCall(auid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuSuspectUrlVersions
     * @param auid The identifier of the AU for which the suspect URL\\ \\ versions are requested (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuSuspectUrlVersionsCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/aususpecturls/{auid}"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuSuspectUrlVersionsValidateBeforeCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling getAuSuspectUrlVersions(Async)");
        }
        
        com.squareup.okhttp.Call call = getAuSuspectUrlVersionsCall(auid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the suspect URL versions of an AU
     * Get the suspect URL versions of an AU given the AU identifier
     * @param auid The identifier of the AU for which the suspect URL\\ \\ versions are requested (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getAuSuspectUrlVersions(String auid) throws ApiException {
        ApiResponse<String> resp = getAuSuspectUrlVersionsWithHttpInfo(auid);
        return resp.getData();
    }

    /**
     * Get the suspect URL versions of an AU
     * Get the suspect URL versions of an AU given the AU identifier
     * @param auid The identifier of the AU for which the suspect URL\\ \\ versions are requested (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getAuSuspectUrlVersionsWithHttpInfo(String auid) throws ApiException {
        com.squareup.okhttp.Call call = getAuSuspectUrlVersionsValidateBeforeCall(auid, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the suspect URL versions of an AU (asynchronously)
     * Get the suspect URL versions of an AU given the AU identifier
     * @param auid The identifier of the AU for which the suspect URL\\ \\ versions are requested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuSuspectUrlVersionsAsync(String auid, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuSuspectUrlVersionsValidateBeforeCall(auid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAuqueries
     * @param auQuery The query that specifies the archival units to be\\ \\ returned (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuqueriesCall(String auQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/auqueries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (auQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("auQuery", auQuery));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuqueriesValidateBeforeCall(String auQuery, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'auQuery' is set
        if (auQuery == null) {
            throw new ApiException("Missing the required parameter 'auQuery' when calling getAuqueries(Async)");
        }
        
        com.squareup.okhttp.Call call = getAuqueriesCall(auQuery, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query for archival unit properties
     * Query for archival units that meet a set of specified\\ \\ conditions
     * @param auQuery The query that specifies the archival units to be\\ \\ returned (required)
     * @return List&lt;AuWsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AuWsResult> getAuqueries(String auQuery) throws ApiException {
        ApiResponse<List<AuWsResult>> resp = getAuqueriesWithHttpInfo(auQuery);
        return resp.getData();
    }

    /**
     * Query for archival unit properties
     * Query for archival units that meet a set of specified\\ \\ conditions
     * @param auQuery The query that specifies the archival units to be\\ \\ returned (required)
     * @return ApiResponse&lt;List&lt;AuWsResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AuWsResult>> getAuqueriesWithHttpInfo(String auQuery) throws ApiException {
        com.squareup.okhttp.Call call = getAuqueriesValidateBeforeCall(auQuery, null, null);
        Type localVarReturnType = new TypeToken<List<AuWsResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query for archival unit properties (asynchronously)
     * Query for archival units that meet a set of specified\\ \\ conditions
     * @param auQuery The query that specifies the archival units to be\\ \\ returned (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuqueriesAsync(String auQuery, final ApiCallback<List<AuWsResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuqueriesValidateBeforeCall(auQuery, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AuWsResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNoAuPeers
     * @param auid The identifier of the AU for which the NoAuPeerSet\\ \\ object is requested (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNoAuPeersCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/noaupeers/{auid}"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNoAuPeersValidateBeforeCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling getNoAuPeers(Async)");
        }
        
        com.squareup.okhttp.Call call = getNoAuPeersCall(auid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the NoAuPeerSet object of an AU
     * Get the NoAuPeerSet object of an AU given the AU identifier
     * @param auid The identifier of the AU for which the NoAuPeerSet\\ \\ object is requested (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getNoAuPeers(String auid) throws ApiException {
        ApiResponse<String> resp = getNoAuPeersWithHttpInfo(auid);
        return resp.getData();
    }

    /**
     * Get the NoAuPeerSet object of an AU
     * Get the NoAuPeerSet object of an AU given the AU identifier
     * @param auid The identifier of the AU for which the NoAuPeerSet\\ \\ object is requested (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getNoAuPeersWithHttpInfo(String auid) throws ApiException {
        com.squareup.okhttp.Call call = getNoAuPeersValidateBeforeCall(auid, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the NoAuPeerSet object of an AU (asynchronously)
     * Get the NoAuPeerSet object of an AU given the AU identifier
     * @param auid The identifier of the AU for which the NoAuPeerSet\\ \\ object is requested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNoAuPeersAsync(String auid, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNoAuPeersValidateBeforeCall(auid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchAuAgreements
     * @param body The parts of the Archival Unit poll agreements to be\ \ updated (required)
     * @param auid The identifier of the AU for which the poll agreements\\ \\ are to be updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchAuAgreementsCall(Object body, String auid, String xLockssRequestCookie, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/auagreements/{auid}"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xLockssRequestCookie != null)
        localVarHeaderParams.put("X-Lockss-Request-Cookie", apiClient.parameterToString(xLockssRequestCookie));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchAuAgreementsValidateBeforeCall(Object body, String auid, String xLockssRequestCookie, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchAuAgreements(Async)");
        }
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling patchAuAgreements(Async)");
        }
        
        com.squareup.okhttp.Call call = patchAuAgreementsCall(body, auid, xLockssRequestCookie, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the poll agreements of an AU
     * Update the poll agreements of an AU given the AU identifier
     * @param body The parts of the Archival Unit poll agreements to be\ \ updated (required)
     * @param auid The identifier of the AU for which the poll agreements\\ \\ are to be updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void patchAuAgreements(Object body, String auid, String xLockssRequestCookie) throws ApiException {
        patchAuAgreementsWithHttpInfo(body, auid, xLockssRequestCookie);
    }

    /**
     * Update the poll agreements of an AU
     * Update the poll agreements of an AU given the AU identifier
     * @param body The parts of the Archival Unit poll agreements to be\ \ updated (required)
     * @param auid The identifier of the AU for which the poll agreements\\ \\ are to be updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> patchAuAgreementsWithHttpInfo(Object body, String auid, String xLockssRequestCookie) throws ApiException {
        com.squareup.okhttp.Call call = patchAuAgreementsValidateBeforeCall(body, auid, xLockssRequestCookie, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the poll agreements of an AU (asynchronously)
     * Update the poll agreements of an AU given the AU identifier
     * @param body The parts of the Archival Unit poll agreements to be\ \ updated (required)
     * @param auid The identifier of the AU for which the poll agreements\\ \\ are to be updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchAuAgreementsAsync(Object body, String auid, String xLockssRequestCookie, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchAuAgreementsValidateBeforeCall(body, auid, xLockssRequestCookie, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for patchAuState
     * @param body The parts of the Archival Unit state to be updated (required)
     * @param auid The identifier of the AU for which the state is to be\\ \\ updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchAuStateCall(Object body, String auid, String xLockssRequestCookie, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/austates/{auid}"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xLockssRequestCookie != null)
        localVarHeaderParams.put("X-Lockss-Request-Cookie", apiClient.parameterToString(xLockssRequestCookie));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchAuStateValidateBeforeCall(Object body, String auid, String xLockssRequestCookie, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchAuState(Async)");
        }
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling patchAuState(Async)");
        }
        
        com.squareup.okhttp.Call call = patchAuStateCall(body, auid, xLockssRequestCookie, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the state of an AU
     * Update the state of an AU given the AU identifier
     * @param body The parts of the Archival Unit state to be updated (required)
     * @param auid The identifier of the AU for which the state is to be\\ \\ updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void patchAuState(Object body, String auid, String xLockssRequestCookie) throws ApiException {
        patchAuStateWithHttpInfo(body, auid, xLockssRequestCookie);
    }

    /**
     * Update the state of an AU
     * Update the state of an AU given the AU identifier
     * @param body The parts of the Archival Unit state to be updated (required)
     * @param auid The identifier of the AU for which the state is to be\\ \\ updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> patchAuStateWithHttpInfo(Object body, String auid, String xLockssRequestCookie) throws ApiException {
        com.squareup.okhttp.Call call = patchAuStateValidateBeforeCall(body, auid, xLockssRequestCookie, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the state of an AU (asynchronously)
     * Update the state of an AU given the AU identifier
     * @param body The parts of the Archival Unit state to be updated (required)
     * @param auid The identifier of the AU for which the state is to be\\ \\ updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchAuStateAsync(Object body, String auid, String xLockssRequestCookie, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchAuStateValidateBeforeCall(body, auid, xLockssRequestCookie, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for postAus
     * @param body The identifiers of the Archival Units to be added (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postAusCall(List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/aus/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postAusValidateBeforeCall(List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postAus(Async)");
        }
        
        com.squareup.okhttp.Call call = postAusCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add AUs
     * Add a group of AUs given their identifiers
     * @param body The identifiers of the Archival Units to be added (required)
     * @return List&lt;ContentConfigurationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContentConfigurationResult> postAus(List<String> body) throws ApiException {
        ApiResponse<List<ContentConfigurationResult>> resp = postAusWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Add AUs
     * Add a group of AUs given their identifiers
     * @param body The identifiers of the Archival Units to be added (required)
     * @return ApiResponse&lt;List&lt;ContentConfigurationResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContentConfigurationResult>> postAusWithHttpInfo(List<String> body) throws ApiException {
        com.squareup.okhttp.Call call = postAusValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add AUs (asynchronously)
     * Add a group of AUs given their identifiers
     * @param body The identifiers of the Archival Units to be added (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postAusAsync(List<String> body, final ApiCallback<List<ContentConfigurationResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postAusValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putAuConfig
     * @param body The Archival Unit configuration to be stored (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAuConfigCall(AuConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/aus/{auid}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAuConfigValidateBeforeCall(AuConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putAuConfig(Async)");
        }
        
        com.squareup.okhttp.Call call = putAuConfigCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Store the configuration of an AU
     * Store the configuration of an AU given the AU identifier
     * @param body The Archival Unit configuration to be stored (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putAuConfig(AuConfiguration body) throws ApiException {
        putAuConfigWithHttpInfo(body);
    }

    /**
     * Store the configuration of an AU
     * Store the configuration of an AU given the AU identifier
     * @param body The Archival Unit configuration to be stored (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putAuConfigWithHttpInfo(AuConfiguration body) throws ApiException {
        com.squareup.okhttp.Call call = putAuConfigValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Store the configuration of an AU (asynchronously)
     * Store the configuration of an AU given the AU identifier
     * @param body The Archival Unit configuration to be stored (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAuConfigAsync(AuConfiguration body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAuConfigValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for putAuSubstanceCheck
     * @param auid The identifier of the AU for which the substance check\\ \\ is requested (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAuSubstanceCheckCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/ausubstances/{auid}"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAuSubstanceCheckValidateBeforeCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling putAuSubstanceCheck(Async)");
        }
        
        com.squareup.okhttp.Call call = putAuSubstanceCheckCall(auid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the substance of an AU
     * Update the substance of an AU given the AU identifier
     * @param auid The identifier of the AU for which the substance check\\ \\ is requested (required)
     * @return CheckSubstanceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CheckSubstanceResult putAuSubstanceCheck(String auid) throws ApiException {
        ApiResponse<CheckSubstanceResult> resp = putAuSubstanceCheckWithHttpInfo(auid);
        return resp.getData();
    }

    /**
     * Update the substance of an AU
     * Update the substance of an AU given the AU identifier
     * @param auid The identifier of the AU for which the substance check\\ \\ is requested (required)
     * @return ApiResponse&lt;CheckSubstanceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CheckSubstanceResult> putAuSubstanceCheckWithHttpInfo(String auid) throws ApiException {
        com.squareup.okhttp.Call call = putAuSubstanceCheckValidateBeforeCall(auid, null, null);
        Type localVarReturnType = new TypeToken<CheckSubstanceResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update the substance of an AU (asynchronously)
     * Update the substance of an AU given the AU identifier
     * @param auid The identifier of the AU for which the substance check\\ \\ is requested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAuSubstanceCheckAsync(String auid, final ApiCallback<CheckSubstanceResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAuSubstanceCheckValidateBeforeCall(auid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CheckSubstanceResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putAuSuspectUrlVersions
     * @param body The parts of the Archival Unit suspect URL versions to\ \ be updated (required)
     * @param auid The identifier of the AU for which the suspect URL\\ \\ versions are to be updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAuSuspectUrlVersionsCall(Object body, String auid, String xLockssRequestCookie, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/aususpecturls/{auid}"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xLockssRequestCookie != null)
        localVarHeaderParams.put("X-Lockss-Request-Cookie", apiClient.parameterToString(xLockssRequestCookie));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAuSuspectUrlVersionsValidateBeforeCall(Object body, String auid, String xLockssRequestCookie, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putAuSuspectUrlVersions(Async)");
        }
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling putAuSuspectUrlVersions(Async)");
        }
        
        com.squareup.okhttp.Call call = putAuSuspectUrlVersionsCall(body, auid, xLockssRequestCookie, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the suspect URL versions of an AU
     * Update the suspect URL versions of an AU given the AU\\ \\ identifier
     * @param body The parts of the Archival Unit suspect URL versions to\ \ be updated (required)
     * @param auid The identifier of the AU for which the suspect URL\\ \\ versions are to be updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putAuSuspectUrlVersions(Object body, String auid, String xLockssRequestCookie) throws ApiException {
        putAuSuspectUrlVersionsWithHttpInfo(body, auid, xLockssRequestCookie);
    }

    /**
     * Update the suspect URL versions of an AU
     * Update the suspect URL versions of an AU given the AU\\ \\ identifier
     * @param body The parts of the Archival Unit suspect URL versions to\ \ be updated (required)
     * @param auid The identifier of the AU for which the suspect URL\\ \\ versions are to be updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putAuSuspectUrlVersionsWithHttpInfo(Object body, String auid, String xLockssRequestCookie) throws ApiException {
        com.squareup.okhttp.Call call = putAuSuspectUrlVersionsValidateBeforeCall(body, auid, xLockssRequestCookie, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the suspect URL versions of an AU (asynchronously)
     * Update the suspect URL versions of an AU given the AU\\ \\ identifier
     * @param body The parts of the Archival Unit suspect URL versions to\ \ be updated (required)
     * @param auid The identifier of the AU for which the suspect URL\\ \\ versions are to be updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAuSuspectUrlVersionsAsync(Object body, String auid, String xLockssRequestCookie, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAuSuspectUrlVersionsValidateBeforeCall(body, auid, xLockssRequestCookie, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for putAusDeactivate
     * @param body The identifiers of the Archival Units to be deactivated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAusDeactivateCall(List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/aus/deactivate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAusDeactivateValidateBeforeCall(List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putAusDeactivate(Async)");
        }
        
        com.squareup.okhttp.Call call = putAusDeactivateCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deactivate AUs
     * Deactivate a group of AUs given their identifiers
     * @param body The identifiers of the Archival Units to be deactivated (required)
     * @return List&lt;ContentConfigurationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContentConfigurationResult> putAusDeactivate(List<String> body) throws ApiException {
        ApiResponse<List<ContentConfigurationResult>> resp = putAusDeactivateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Deactivate AUs
     * Deactivate a group of AUs given their identifiers
     * @param body The identifiers of the Archival Units to be deactivated (required)
     * @return ApiResponse&lt;List&lt;ContentConfigurationResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContentConfigurationResult>> putAusDeactivateWithHttpInfo(List<String> body) throws ApiException {
        com.squareup.okhttp.Call call = putAusDeactivateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deactivate AUs (asynchronously)
     * Deactivate a group of AUs given their identifiers
     * @param body The identifiers of the Archival Units to be deactivated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAusDeactivateAsync(List<String> body, final ApiCallback<List<ContentConfigurationResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAusDeactivateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putAusMdDisable
     * @param auid The identifier of the Archival Units for which metadata\\ \\ extraction is to be disabled (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAusMdDisableCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/aus/{auid}/mddisable"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAusMdDisableValidateBeforeCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling putAusMdDisable(Async)");
        }
        
        com.squareup.okhttp.Call call = putAusMdDisableCall(auid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Disable AU metadata extraction
     * Disable the metadata extraction for an AU given its\\ \\ identifier
     * @param auid The identifier of the Archival Units for which metadata\\ \\ extraction is to be disabled (required)
     * @return RequestAuControlResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RequestAuControlResult putAusMdDisable(String auid) throws ApiException {
        ApiResponse<RequestAuControlResult> resp = putAusMdDisableWithHttpInfo(auid);
        return resp.getData();
    }

    /**
     * Disable AU metadata extraction
     * Disable the metadata extraction for an AU given its\\ \\ identifier
     * @param auid The identifier of the Archival Units for which metadata\\ \\ extraction is to be disabled (required)
     * @return ApiResponse&lt;RequestAuControlResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RequestAuControlResult> putAusMdDisableWithHttpInfo(String auid) throws ApiException {
        com.squareup.okhttp.Call call = putAusMdDisableValidateBeforeCall(auid, null, null);
        Type localVarReturnType = new TypeToken<RequestAuControlResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Disable AU metadata extraction (asynchronously)
     * Disable the metadata extraction for an AU given its\\ \\ identifier
     * @param auid The identifier of the Archival Units for which metadata\\ \\ extraction is to be disabled (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAusMdDisableAsync(String auid, final ApiCallback<RequestAuControlResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAusMdDisableValidateBeforeCall(auid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RequestAuControlResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putAusMdEnable
     * @param auid The identifier of the Archival Units for which metadata\\ \\ extraction is to be enabled (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAusMdEnableCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/aus/{auid}/mdenable"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAusMdEnableValidateBeforeCall(String auid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling putAusMdEnable(Async)");
        }
        
        com.squareup.okhttp.Call call = putAusMdEnableCall(auid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable AU metadata extraction
     * Enable the metadata extraction for an AU given its identifier
     * @param auid The identifier of the Archival Units for which metadata\\ \\ extraction is to be enabled (required)
     * @return RequestAuControlResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RequestAuControlResult putAusMdEnable(String auid) throws ApiException {
        ApiResponse<RequestAuControlResult> resp = putAusMdEnableWithHttpInfo(auid);
        return resp.getData();
    }

    /**
     * Enable AU metadata extraction
     * Enable the metadata extraction for an AU given its identifier
     * @param auid The identifier of the Archival Units for which metadata\\ \\ extraction is to be enabled (required)
     * @return ApiResponse&lt;RequestAuControlResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RequestAuControlResult> putAusMdEnableWithHttpInfo(String auid) throws ApiException {
        com.squareup.okhttp.Call call = putAusMdEnableValidateBeforeCall(auid, null, null);
        Type localVarReturnType = new TypeToken<RequestAuControlResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable AU metadata extraction (asynchronously)
     * Enable the metadata extraction for an AU given its identifier
     * @param auid The identifier of the Archival Units for which metadata\\ \\ extraction is to be enabled (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAusMdEnableAsync(String auid, final ApiCallback<RequestAuControlResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAusMdEnableValidateBeforeCall(auid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RequestAuControlResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putAusReactivate
     * @param body The identifiers of the Archival Units to be reactivated (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putAusReactivateCall(List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/aus/reactivate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putAusReactivateValidateBeforeCall(List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putAusReactivate(Async)");
        }
        
        com.squareup.okhttp.Call call = putAusReactivateCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reactivate AUs
     * Reactivate a group of AUs given their identifiers
     * @param body The identifiers of the Archival Units to be reactivated (required)
     * @return List&lt;ContentConfigurationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContentConfigurationResult> putAusReactivate(List<String> body) throws ApiException {
        ApiResponse<List<ContentConfigurationResult>> resp = putAusReactivateWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Reactivate AUs
     * Reactivate a group of AUs given their identifiers
     * @param body The identifiers of the Archival Units to be reactivated (required)
     * @return ApiResponse&lt;List&lt;ContentConfigurationResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContentConfigurationResult>> putAusReactivateWithHttpInfo(List<String> body) throws ApiException {
        com.squareup.okhttp.Call call = putAusReactivateValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reactivate AUs (asynchronously)
     * Reactivate a group of AUs given their identifiers
     * @param body The identifiers of the Archival Units to be reactivated (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putAusReactivateAsync(List<String> body, final ApiCallback<List<ContentConfigurationResult>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putAusReactivateValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putNoAuPeers
     * @param body The parts of the Archival Unit NoAuPeerSet object to be\ \ updated (required)
     * @param auid The identifier of the AU for which the NoAuPeerSet\\ \\ object is to be updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putNoAuPeersCall(Object body, String auid, String xLockssRequestCookie, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/noaupeers/{auid}"
            .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xLockssRequestCookie != null)
        localVarHeaderParams.put("X-Lockss-Request-Cookie", apiClient.parameterToString(xLockssRequestCookie));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putNoAuPeersValidateBeforeCall(Object body, String auid, String xLockssRequestCookie, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putNoAuPeers(Async)");
        }
        // verify the required parameter 'auid' is set
        if (auid == null) {
            throw new ApiException("Missing the required parameter 'auid' when calling putNoAuPeers(Async)");
        }
        
        com.squareup.okhttp.Call call = putNoAuPeersCall(body, auid, xLockssRequestCookie, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update the NoAuPeerSet object of an AU
     * Update the NoAuPeerSet object of an AU given the AU\\ \\ identifier
     * @param body The parts of the Archival Unit NoAuPeerSet object to be\ \ updated (required)
     * @param auid The identifier of the AU for which the NoAuPeerSet\\ \\ object is to be updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void putNoAuPeers(Object body, String auid, String xLockssRequestCookie) throws ApiException {
        putNoAuPeersWithHttpInfo(body, auid, xLockssRequestCookie);
    }

    /**
     * Update the NoAuPeerSet object of an AU
     * Update the NoAuPeerSet object of an AU given the AU\\ \\ identifier
     * @param body The parts of the Archival Unit NoAuPeerSet object to be\ \ updated (required)
     * @param auid The identifier of the AU for which the NoAuPeerSet\\ \\ object is to be updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> putNoAuPeersWithHttpInfo(Object body, String auid, String xLockssRequestCookie) throws ApiException {
        com.squareup.okhttp.Call call = putNoAuPeersValidateBeforeCall(body, auid, xLockssRequestCookie, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update the NoAuPeerSet object of an AU (asynchronously)
     * Update the NoAuPeerSet object of an AU given the AU\\ \\ identifier
     * @param body The parts of the Archival Unit NoAuPeerSet object to be\ \ updated (required)
     * @param auid The identifier of the AU for which the NoAuPeerSet\\ \\ object is to be updated (required)
     * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putNoAuPeersAsync(Object body, String auid, String xLockssRequestCookie, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putNoAuPeersValidateBeforeCall(body, auid, xLockssRequestCookie, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
