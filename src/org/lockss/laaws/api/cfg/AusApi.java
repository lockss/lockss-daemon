/*
 * LOCKSS Configuration Service REST API
 * REST API of the LOCKSS Configuration Service
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.lockss.laaws.api.cfg;

import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.lockss.laaws.client.ApiCallback;
import org.lockss.laaws.client.ApiException;
import org.lockss.laaws.client.ApiResponse;
import org.lockss.laaws.client.Configuration;
import org.lockss.laaws.client.Pair;
import org.lockss.laaws.client.V2RestClient;
import org.lockss.laaws.model.cfg.AuConfiguration;
import org.lockss.laaws.model.cfg.AuStatus;
import org.lockss.laaws.model.cfg.AuWsResult;
import org.lockss.laaws.model.cfg.CheckSubstanceResult;
import org.lockss.laaws.model.cfg.ContentConfigurationResult;
import org.lockss.laaws.model.cfg.RequestAuControlResult;

public class AusApi {

  private V2RestClient apiClient;

  public AusApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AusApi(V2RestClient apiClient) {
    this.apiClient = apiClient;
  }

  public V2RestClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(V2RestClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for deleteAuConfig
   *
   * @param auid      The identifier of the AU for which the configuration is\\ \\ to be deleted (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The deleted configuration of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deleteAuConfigCall(String auid, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/aus/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteAuConfigValidateBeforeCall(String auid, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling deleteAuConfig(Async)");
    }

    okhttp3.Call localVarCall = deleteAuConfigCall(auid, _callback);
    return localVarCall;

  }

  /**
   * Delete the configuration of an AU
   * Delete the configuration of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the configuration is\\ \\ to be deleted (required)
   * @return AuConfiguration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The deleted configuration of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public AuConfiguration deleteAuConfig(String auid) throws ApiException {
    ApiResponse<AuConfiguration> localVarResp = deleteAuConfigWithHttpInfo(auid);
    return localVarResp.getData();
  }

  /**
   * Delete the configuration of an AU
   * Delete the configuration of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the configuration is\\ \\ to be deleted (required)
   * @return ApiResponse&lt;AuConfiguration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The deleted configuration of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<AuConfiguration> deleteAuConfigWithHttpInfo(String auid) throws ApiException {
    okhttp3.Call localVarCall = deleteAuConfigValidateBeforeCall(auid, null);
    Type localVarReturnType = new TypeToken<AuConfiguration>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete the configuration of an AU (asynchronously)
   * Delete the configuration of an AU given the AU identifier
   *
   * @param auid      The identifier of the AU for which the configuration is\\ \\ to be deleted (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The deleted configuration of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deleteAuConfigAsync(String auid, final ApiCallback<AuConfiguration> _callback)
    throws ApiException {

    okhttp3.Call localVarCall = deleteAuConfigValidateBeforeCall(auid, _callback);
    Type localVarReturnType = new TypeToken<AuConfiguration>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteAusDelete
   *
   * @param auIds     The identifiers of the Archival Units to be deleted (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the deleted AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deleteAusDeleteCall(List<String> auIds, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = auIds;

    // create path and map variables
    String localVarPath = "/aus/delete";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteAusDeleteValidateBeforeCall(List<String> auIds,
    final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'auIds' is set
    if (auIds == null) {
      throw new ApiException(
        "Missing the required parameter 'auIds' when calling deleteAusDelete(Async)");
    }

    okhttp3.Call localVarCall = deleteAusDeleteCall(auIds, _callback);
    return localVarCall;

  }

  /**
   * Delete AUs
   * Delete a group of AUs given their identifiers
   *
   * @param auIds The identifiers of the Archival Units to be deleted (required)
   * @return List&lt;ContentConfigurationResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the deleted AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public List<ContentConfigurationResult> deleteAusDelete(List<String> auIds) throws ApiException {
    ApiResponse<List<ContentConfigurationResult>> localVarResp = deleteAusDeleteWithHttpInfo(auIds);
    return localVarResp.getData();
  }

  /**
   * Delete AUs
   * Delete a group of AUs given their identifiers
   *
   * @param auIds The identifiers of the Archival Units to be deleted (required)
   * @return ApiResponse&lt;List&lt;ContentConfigurationResult&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the deleted AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<ContentConfigurationResult>> deleteAusDeleteWithHttpInfo(
    List<String> auIds) throws ApiException {
    okhttp3.Call localVarCall = deleteAusDeleteValidateBeforeCall(auIds, null);
    Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete AUs (asynchronously)
   * Delete a group of AUs given their identifiers
   *
   * @param auIds     The identifiers of the Archival Units to be deleted (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the deleted AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deleteAusDeleteAsync(List<String> auIds,
    final ApiCallback<List<ContentConfigurationResult>> _callback) throws ApiException {

    okhttp3.Call localVarCall = deleteAusDeleteValidateBeforeCall(auIds, _callback);
    Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getAllAuConfig
   *
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The configuration of all AUs </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAllAuConfigCall(final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/aus";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAllAuConfigValidateBeforeCall(final ApiCallback _callback)
    throws ApiException {

    okhttp3.Call localVarCall = getAllAuConfigCall(_callback);
    return localVarCall;

  }

  /**
   * Get the configurations of all AUs
   * Get the configuration of all AUs
   *
   * @return List&lt;AuConfiguration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The configuration of all AUs </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public List<AuConfiguration> getAllAuConfig() throws ApiException {
    ApiResponse<List<AuConfiguration>> localVarResp = getAllAuConfigWithHttpInfo();
    return localVarResp.getData();
  }

  /**
   * Get the configurations of all AUs
   * Get the configuration of all AUs
   *
   * @return ApiResponse&lt;List&lt;AuConfiguration&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The configuration of all AUs </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<AuConfiguration>> getAllAuConfigWithHttpInfo() throws ApiException {
    okhttp3.Call localVarCall = getAllAuConfigValidateBeforeCall(null);
    Type localVarReturnType = new TypeToken<List<AuConfiguration>>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the configurations of all AUs (asynchronously)
   * Get the configuration of all AUs
   *
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The configuration of all AUs </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAllAuConfigAsync(final ApiCallback<List<AuConfiguration>> _callback)
    throws ApiException {

    okhttp3.Call localVarCall = getAllAuConfigValidateBeforeCall(_callback);
    Type localVarReturnType = new TypeToken<List<AuConfiguration>>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getAuAgreements
   *
   * @param auid      The identifier of the AU for which the poll agreements\\ \\ are requested (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The poll agreements of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAuAgreementsCall(String auid, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/auagreements/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAuAgreementsValidateBeforeCall(String auid, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling getAuAgreements(Async)");
    }

    okhttp3.Call localVarCall = getAuAgreementsCall(auid, _callback);
    return localVarCall;

  }

  /**
   * Get the poll agreements of an AU
   * Get the poll agreements of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the poll agreements\\ \\ are requested (required)
   * @return String
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The poll agreements of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public String getAuAgreements(String auid) throws ApiException {
    ApiResponse<String> localVarResp = getAuAgreementsWithHttpInfo(auid);
    return localVarResp.getData();
  }

  /**
   * Get the poll agreements of an AU
   * Get the poll agreements of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the poll agreements\\ \\ are requested (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The poll agreements of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<String> getAuAgreementsWithHttpInfo(String auid) throws ApiException {
    okhttp3.Call localVarCall = getAuAgreementsValidateBeforeCall(auid, null);
    Type localVarReturnType = new TypeToken<String>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the poll agreements of an AU (asynchronously)
   * Get the poll agreements of an AU given the AU identifier
   *
   * @param auid      The identifier of the AU for which the poll agreements\\ \\ are requested (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The poll agreements of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAuAgreementsAsync(String auid, final ApiCallback<String> _callback)
    throws ApiException {

    okhttp3.Call localVarCall = getAuAgreementsValidateBeforeCall(auid, _callback);
    Type localVarReturnType = new TypeToken<String>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getAuConfig
   *
   * @param auid      The identifier of the AU for which the configuration is\\ \\ requested (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The configuration of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAuConfigCall(String auid, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/aus/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAuConfigValidateBeforeCall(String auid, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling getAuConfig(Async)");
    }

    okhttp3.Call localVarCall = getAuConfigCall(auid, _callback);
    return localVarCall;

  }

  /**
   * Get the configuration of an AU
   * Get the configuration of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the configuration is\\ \\ requested (required)
   * @return AuConfiguration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The configuration of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public AuConfiguration getAuConfig(String auid) throws ApiException {
    ApiResponse<AuConfiguration> localVarResp = getAuConfigWithHttpInfo(auid);
    return localVarResp.getData();
  }

  /**
   * Get the configuration of an AU
   * Get the configuration of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the configuration is\\ \\ requested (required)
   * @return ApiResponse&lt;AuConfiguration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The configuration of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<AuConfiguration> getAuConfigWithHttpInfo(String auid) throws ApiException {
    okhttp3.Call localVarCall = getAuConfigValidateBeforeCall(auid, null);
    Type localVarReturnType = new TypeToken<AuConfiguration>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the configuration of an AU (asynchronously)
   * Get the configuration of an AU given the AU identifier
   *
   * @param auid      The identifier of the AU for which the configuration is\\ \\ requested (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The configuration of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAuConfigAsync(String auid, final ApiCallback<AuConfiguration> _callback)
    throws ApiException {

    okhttp3.Call localVarCall = getAuConfigValidateBeforeCall(auid, _callback);
    Type localVarReturnType = new TypeToken<AuConfiguration>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getAuState
   *
   * @param auid      The identifier of the AU for which the state is requested (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The state of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAuStateCall(String auid, final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/austates/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAuStateValidateBeforeCall(String auid, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling getAuState(Async)");
    }

    okhttp3.Call localVarCall = getAuStateCall(auid, _callback);
    return localVarCall;

  }

  /**
   * Get the state of an AU
   * Get the state of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the state is requested (required)
   * @return String
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The state of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public String getAuState(String auid) throws ApiException {
    ApiResponse<String> localVarResp = getAuStateWithHttpInfo(auid);
    return localVarResp.getData();
  }

  /**
   * Get the state of an AU
   * Get the state of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the state is requested (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The state of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<String> getAuStateWithHttpInfo(String auid) throws ApiException {
    okhttp3.Call localVarCall = getAuStateValidateBeforeCall(auid, null);
    Type localVarReturnType = new TypeToken<String>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the state of an AU (asynchronously)
   * Get the state of an AU given the AU identifier
   *
   * @param auid      The identifier of the AU for which the state is requested (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The state of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAuStateAsync(String auid, final ApiCallback<String> _callback)
    throws ApiException {

    okhttp3.Call localVarCall = getAuStateValidateBeforeCall(auid, _callback);
    Type localVarReturnType = new TypeToken<String>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getAuStatus
   *
   * @param auid      The identifier of the AU for which the status is\\ \\ requested (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The status of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAuStatusCall(String auid, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/austatuses/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAuStatusValidateBeforeCall(String auid, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling getAuStatus(Async)");
    }

    okhttp3.Call localVarCall = getAuStatusCall(auid, _callback);
    return localVarCall;

  }

  /**
   * Get the status of an AU
   * Get the status of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the status is\\ \\ requested (required)
   * @return AuStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The status of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public AuStatus getAuStatus(String auid) throws ApiException {
    ApiResponse<AuStatus> localVarResp = getAuStatusWithHttpInfo(auid);
    return localVarResp.getData();
  }

  /**
   * Get the status of an AU
   * Get the status of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the status is\\ \\ requested (required)
   * @return ApiResponse&lt;AuStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The status of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<AuStatus> getAuStatusWithHttpInfo(String auid) throws ApiException {
    okhttp3.Call localVarCall = getAuStatusValidateBeforeCall(auid, null);
    Type localVarReturnType = new TypeToken<AuStatus>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the status of an AU (asynchronously)
   * Get the status of an AU given the AU identifier
   *
   * @param auid      The identifier of the AU for which the status is\\ \\ requested (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The status of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAuStatusAsync(String auid, final ApiCallback<AuStatus> _callback)
    throws ApiException {

    okhttp3.Call localVarCall = getAuStatusValidateBeforeCall(auid, _callback);
    Type localVarReturnType = new TypeToken<AuStatus>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getAuSuspectUrlVersions
   *
   * @param auid      The identifier of the AU for which the suspect URL\\ \\ versions are requested (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The suspect URL versions of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAuSuspectUrlVersionsCall(String auid, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/aususpecturls/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAuSuspectUrlVersionsValidateBeforeCall(String auid,
    final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling getAuSuspectUrlVersions(Async)");
    }

    okhttp3.Call localVarCall = getAuSuspectUrlVersionsCall(auid, _callback);
    return localVarCall;

  }

  /**
   * Get the suspect URL versions of an AU
   * Get the suspect URL versions of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the suspect URL\\ \\ versions are requested (required)
   * @return String
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The suspect URL versions of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public String getAuSuspectUrlVersions(String auid) throws ApiException {
    ApiResponse<String> localVarResp = getAuSuspectUrlVersionsWithHttpInfo(auid);
    return localVarResp.getData();
  }

  /**
   * Get the suspect URL versions of an AU
   * Get the suspect URL versions of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the suspect URL\\ \\ versions are requested (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The suspect URL versions of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<String> getAuSuspectUrlVersionsWithHttpInfo(String auid) throws ApiException {
    okhttp3.Call localVarCall = getAuSuspectUrlVersionsValidateBeforeCall(auid, null);
    Type localVarReturnType = new TypeToken<String>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the suspect URL versions of an AU (asynchronously)
   * Get the suspect URL versions of an AU given the AU identifier
   *
   * @param auid      The identifier of the AU for which the suspect URL\\ \\ versions are requested (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The suspect URL versions of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAuSuspectUrlVersionsAsync(String auid, final ApiCallback<String> _callback)
    throws ApiException {

    okhttp3.Call localVarCall = getAuSuspectUrlVersionsValidateBeforeCall(auid, _callback);
    Type localVarReturnType = new TypeToken<String>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getAuqueries
   *
   * @param auQuery   The query that specifies the archival units to be\\ \\ returned (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested archival units </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAuqueriesCall(String auQuery, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/auqueries";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (auQuery != null) {
      localVarQueryParams.addAll(apiClient.parameterToPair("auQuery", auQuery));
    }

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getAuqueriesValidateBeforeCall(String auQuery, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'auQuery' is set
    if (auQuery == null) {
      throw new ApiException(
        "Missing the required parameter 'auQuery' when calling getAuqueries(Async)");
    }

    okhttp3.Call localVarCall = getAuqueriesCall(auQuery, _callback);
    return localVarCall;

  }

  /**
   * Query for archival unit properties
   * Query for archival units that meet a set of specified\\ \\ conditions
   *
   * @param auQuery The query that specifies the archival units to be\\ \\ returned (required)
   * @return List&lt;AuWsResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested archival units </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public List<AuWsResult> getAuqueries(String auQuery) throws ApiException {
    ApiResponse<List<AuWsResult>> localVarResp = getAuqueriesWithHttpInfo(auQuery);
    return localVarResp.getData();
  }

  /**
   * Query for archival unit properties
   * Query for archival units that meet a set of specified\\ \\ conditions
   *
   * @param auQuery The query that specifies the archival units to be\\ \\ returned (required)
   * @return ApiResponse&lt;List&lt;AuWsResult&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested archival units </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<AuWsResult>> getAuqueriesWithHttpInfo(String auQuery)
    throws ApiException {
    okhttp3.Call localVarCall = getAuqueriesValidateBeforeCall(auQuery, null);
    Type localVarReturnType = new TypeToken<List<AuWsResult>>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Query for archival unit properties (asynchronously)
   * Query for archival units that meet a set of specified\\ \\ conditions
   *
   * @param auQuery   The query that specifies the archival units to be\\ \\ returned (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the requested archival units </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getAuqueriesAsync(String auQuery,
    final ApiCallback<List<AuWsResult>> _callback) throws ApiException {

    okhttp3.Call localVarCall = getAuqueriesValidateBeforeCall(auQuery, _callback);
    Type localVarReturnType = new TypeToken<List<AuWsResult>>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getNoAuPeers
   *
   * @param auid      The identifier of the AU for which the NoAuPeerSet\\ \\ object is requested (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The NoAuPeerSet object of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getNoAuPeersCall(String auid, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/noaupeers/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getNoAuPeersValidateBeforeCall(String auid, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling getNoAuPeers(Async)");
    }

    okhttp3.Call localVarCall = getNoAuPeersCall(auid, _callback);
    return localVarCall;

  }

  /**
   * Get the NoAuPeerSet object of an AU
   * Get the NoAuPeerSet object of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the NoAuPeerSet\\ \\ object is requested (required)
   * @return String
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The NoAuPeerSet object of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public String getNoAuPeers(String auid) throws ApiException {
    ApiResponse<String> localVarResp = getNoAuPeersWithHttpInfo(auid);
    return localVarResp.getData();
  }

  /**
   * Get the NoAuPeerSet object of an AU
   * Get the NoAuPeerSet object of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the NoAuPeerSet\\ \\ object is requested (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The NoAuPeerSet object of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<String> getNoAuPeersWithHttpInfo(String auid) throws ApiException {
    okhttp3.Call localVarCall = getNoAuPeersValidateBeforeCall(auid, null);
    Type localVarReturnType = new TypeToken<String>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get the NoAuPeerSet object of an AU (asynchronously)
   * Get the NoAuPeerSet object of an AU given the AU identifier
   *
   * @param auid      The identifier of the AU for which the NoAuPeerSet\\ \\ object is requested (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The NoAuPeerSet object of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getNoAuPeersAsync(String auid, final ApiCallback<String> _callback)
    throws ApiException {

    okhttp3.Call localVarCall = getNoAuPeersValidateBeforeCall(auid, _callback);
    Type localVarReturnType = new TypeToken<String>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for patchAuAgreements
   *
   * @param auid                 The identifier of the AU for which the poll agreements\\ \\ are to be updated (required)
   * @param auAgreements         The parts of the Archival Unit poll agreements to be\\ \\ updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @param _callback            Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call patchAuAgreementsCall(String auid, Object auAgreements,
    String xLockssRequestCookie, final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = auAgreements;

    // create path and map variables
    String localVarPath = "/auagreements/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (xLockssRequestCookie != null) {
      localVarHeaderParams.put("X-Lockss-Request-Cookie",
        apiClient.parameterToString(xLockssRequestCookie));
    }

    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call patchAuAgreementsValidateBeforeCall(String auid, Object auAgreements,
    String xLockssRequestCookie, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling patchAuAgreements(Async)");
    }

    // verify the required parameter 'auAgreements' is set
    if (auAgreements == null) {
      throw new ApiException(
        "Missing the required parameter 'auAgreements' when calling patchAuAgreements(Async)");
    }

    okhttp3.Call localVarCall = patchAuAgreementsCall(auid, auAgreements, xLockssRequestCookie,
      _callback);
    return localVarCall;

  }

  /**
   * Update the poll agreements of an AU
   * Update the poll agreements of an AU given the AU identifier
   *
   * @param auid                 The identifier of the AU for which the poll agreements\\ \\ are to be updated (required)
   * @param auAgreements         The parts of the Archival Unit poll agreements to be\\ \\ updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public void patchAuAgreements(String auid, Object auAgreements, String xLockssRequestCookie)
    throws ApiException {
    patchAuAgreementsWithHttpInfo(auid, auAgreements, xLockssRequestCookie);
  }

  /**
   * Update the poll agreements of an AU
   * Update the poll agreements of an AU given the AU identifier
   *
   * @param auid                 The identifier of the AU for which the poll agreements\\ \\ are to be updated (required)
   * @param auAgreements         The parts of the Archival Unit poll agreements to be\\ \\ updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Void> patchAuAgreementsWithHttpInfo(String auid, Object auAgreements,
    String xLockssRequestCookie) throws ApiException {
    okhttp3.Call localVarCall = patchAuAgreementsValidateBeforeCall(auid, auAgreements,
      xLockssRequestCookie, null);
    return apiClient.execute(localVarCall);
  }

  /**
   * Update the poll agreements of an AU (asynchronously)
   * Update the poll agreements of an AU given the AU identifier
   *
   * @param auid                 The identifier of the AU for which the poll agreements\\ \\ are to be updated (required)
   * @param auAgreements         The parts of the Archival Unit poll agreements to be\\ \\ updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @param _callback            The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call patchAuAgreementsAsync(String auid, Object auAgreements,
    String xLockssRequestCookie, final ApiCallback<Void> _callback) throws ApiException {

    okhttp3.Call localVarCall = patchAuAgreementsValidateBeforeCall(auid, auAgreements,
      xLockssRequestCookie, _callback);
    apiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }

  /**
   * Build call for patchAuState
   *
   * @param auid                 The identifier of the AU for which the state is to be\\ \\ updated (required)
   * @param auState              The parts of the Archival Unit state to be updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @param _callback            Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call patchAuStateCall(String auid, Object auState, String xLockssRequestCookie,
    final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = auState;

    // create path and map variables
    String localVarPath = "/austates/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (xLockssRequestCookie != null) {
      localVarHeaderParams.put("X-Lockss-Request-Cookie",
        apiClient.parameterToString(xLockssRequestCookie));
    }

    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call patchAuStateValidateBeforeCall(String auid, Object auState,
    String xLockssRequestCookie, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling patchAuState(Async)");
    }

    // verify the required parameter 'auState' is set
    if (auState == null) {
      throw new ApiException(
        "Missing the required parameter 'auState' when calling patchAuState(Async)");
    }

    okhttp3.Call localVarCall = patchAuStateCall(auid, auState, xLockssRequestCookie, _callback);
    return localVarCall;

  }

  /**
   * Update the state of an AU
   * Update the state of an AU given the AU identifier
   *
   * @param auid                 The identifier of the AU for which the state is to be\\ \\ updated (required)
   * @param auState              The parts of the Archival Unit state to be updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public void patchAuState(String auid, Object auState, String xLockssRequestCookie)
    throws ApiException {
    patchAuStateWithHttpInfo(auid, auState, xLockssRequestCookie);
  }

  /**
   * Update the state of an AU
   * Update the state of an AU given the AU identifier
   *
   * @param auid                 The identifier of the AU for which the state is to be\\ \\ updated (required)
   * @param auState              The parts of the Archival Unit state to be updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Void> patchAuStateWithHttpInfo(String auid, Object auState,
    String xLockssRequestCookie) throws ApiException {
    okhttp3.Call localVarCall = patchAuStateValidateBeforeCall(auid, auState, xLockssRequestCookie,
      null);
    return apiClient.execute(localVarCall);
  }

  /**
   * Update the state of an AU (asynchronously)
   * Update the state of an AU given the AU identifier
   *
   * @param auid                 The identifier of the AU for which the state is to be\\ \\ updated (required)
   * @param auState              The parts of the Archival Unit state to be updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @param _callback            The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call patchAuStateAsync(String auid, Object auState, String xLockssRequestCookie,
    final ApiCallback<Void> _callback) throws ApiException {

    okhttp3.Call localVarCall = patchAuStateValidateBeforeCall(auid, auState, xLockssRequestCookie,
      _callback);
    apiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }

  /**
   * Build call for postAus
   *
   * @param auIds     The identifiers of the Archival Units to be added (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the added AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call postAusCall(List<String> auIds, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = auIds;

    // create path and map variables
    String localVarPath = "/aus/add";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call postAusValidateBeforeCall(List<String> auIds, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'auIds' is set
    if (auIds == null) {
      throw new ApiException("Missing the required parameter 'auIds' when calling postAus(Async)");
    }

    okhttp3.Call localVarCall = postAusCall(auIds, _callback);
    return localVarCall;

  }

  /**
   * Add AUs
   * Add a group of AUs given their identifiers
   *
   * @param auIds The identifiers of the Archival Units to be added (required)
   * @return List&lt;ContentConfigurationResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the added AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public List<ContentConfigurationResult> postAus(List<String> auIds) throws ApiException {
    ApiResponse<List<ContentConfigurationResult>> localVarResp = postAusWithHttpInfo(auIds);
    return localVarResp.getData();
  }

  /**
   * Add AUs
   * Add a group of AUs given their identifiers
   *
   * @param auIds The identifiers of the Archival Units to be added (required)
   * @return ApiResponse&lt;List&lt;ContentConfigurationResult&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the added AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<ContentConfigurationResult>> postAusWithHttpInfo(List<String> auIds)
    throws ApiException {
    okhttp3.Call localVarCall = postAusValidateBeforeCall(auIds, null);
    Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add AUs (asynchronously)
   * Add a group of AUs given their identifiers
   *
   * @param auIds     The identifiers of the Archival Units to be added (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the added AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call postAusAsync(List<String> auIds,
    final ApiCallback<List<ContentConfigurationResult>> _callback) throws ApiException {

    okhttp3.Call localVarCall = postAusValidateBeforeCall(auIds, _callback);
    Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for putAuConfig
   *
   * @param auid            The identifier of the AU for which the configuration is\\ \\ requested (required)
   * @param auConfiguration The Archival Unit configuration to be stored (required)
   * @param _callback       Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAuConfigCall(String auid, AuConfiguration auConfiguration,
    final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = auConfiguration;

    // create path and map variables
    String localVarPath = "/aus/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call putAuConfigValidateBeforeCall(String auid, AuConfiguration auConfiguration,
    final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling putAuConfig(Async)");
    }

    // verify the required parameter 'auConfiguration' is set
    if (auConfiguration == null) {
      throw new ApiException(
        "Missing the required parameter 'auConfiguration' when calling putAuConfig(Async)");
    }

    okhttp3.Call localVarCall = putAuConfigCall(auid, auConfiguration, _callback);
    return localVarCall;

  }

  /**
   * Store the configuration of an AU
   * Store the configuration of an AU given the AU identifier
   *
   * @param auid            The identifier of the AU for which the configuration is\\ \\ requested (required)
   * @param auConfiguration The Archival Unit configuration to be stored (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public void putAuConfig(String auid, AuConfiguration auConfiguration) throws ApiException {
    putAuConfigWithHttpInfo(auid, auConfiguration);
  }

  /**
   * Store the configuration of an AU
   * Store the configuration of an AU given the AU identifier
   *
   * @param auid            The identifier of the AU for which the configuration is\\ \\ requested (required)
   * @param auConfiguration The Archival Unit configuration to be stored (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Void> putAuConfigWithHttpInfo(String auid, AuConfiguration auConfiguration)
    throws ApiException {
    okhttp3.Call localVarCall = putAuConfigValidateBeforeCall(auid, auConfiguration, null);
    return apiClient.execute(localVarCall);
  }

  /**
   * Store the configuration of an AU (asynchronously)
   * Store the configuration of an AU given the AU identifier
   *
   * @param auid            The identifier of the AU for which the configuration is\\ \\ requested (required)
   * @param auConfiguration The Archival Unit configuration to be stored (required)
   * @param _callback       The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAuConfigAsync(String auid, AuConfiguration auConfiguration,
    final ApiCallback<Void> _callback) throws ApiException {

    okhttp3.Call localVarCall = putAuConfigValidateBeforeCall(auid, auConfiguration, _callback);
    apiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }

  /**
   * Build call for putAuSubstanceCheck
   *
   * @param auid      The identifier of the AU for which the substance check\\ \\ is requested (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The substance check of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAuSubstanceCheckCall(String auid, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/ausubstances/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call putAuSubstanceCheckValidateBeforeCall(String auid,
    final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling putAuSubstanceCheck(Async)");
    }

    okhttp3.Call localVarCall = putAuSubstanceCheckCall(auid, _callback);
    return localVarCall;

  }

  /**
   * Update the substance of an AU
   * Update the substance of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the substance check\\ \\ is requested (required)
   * @return CheckSubstanceResult
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The substance check of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public CheckSubstanceResult putAuSubstanceCheck(String auid) throws ApiException {
    ApiResponse<CheckSubstanceResult> localVarResp = putAuSubstanceCheckWithHttpInfo(auid);
    return localVarResp.getData();
  }

  /**
   * Update the substance of an AU
   * Update the substance of an AU given the AU identifier
   *
   * @param auid The identifier of the AU for which the substance check\\ \\ is requested (required)
   * @return ApiResponse&lt;CheckSubstanceResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The substance check of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<CheckSubstanceResult> putAuSubstanceCheckWithHttpInfo(String auid)
    throws ApiException {
    okhttp3.Call localVarCall = putAuSubstanceCheckValidateBeforeCall(auid, null);
    Type localVarReturnType = new TypeToken<CheckSubstanceResult>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Update the substance of an AU (asynchronously)
   * Update the substance of an AU given the AU identifier
   *
   * @param auid      The identifier of the AU for which the substance check\\ \\ is requested (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> The substance check of the specified AU </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAuSubstanceCheckAsync(String auid,
    final ApiCallback<CheckSubstanceResult> _callback) throws ApiException {

    okhttp3.Call localVarCall = putAuSubstanceCheckValidateBeforeCall(auid, _callback);
    Type localVarReturnType = new TypeToken<CheckSubstanceResult>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for putAuSuspectUrlVersions
   *
   * @param auid                 The identifier of the AU for which the suspect URL\\ \\ versions are to be updated (required)
   * @param auSuspectUrlVersions The parts of the Archival Unit suspect URL versions to\\ \\ be updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @param _callback            Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAuSuspectUrlVersionsCall(String auid, Object auSuspectUrlVersions,
    String xLockssRequestCookie, final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = auSuspectUrlVersions;

    // create path and map variables
    String localVarPath = "/aususpecturls/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (xLockssRequestCookie != null) {
      localVarHeaderParams.put("X-Lockss-Request-Cookie",
        apiClient.parameterToString(xLockssRequestCookie));
    }

    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call putAuSuspectUrlVersionsValidateBeforeCall(String auid,
    Object auSuspectUrlVersions, String xLockssRequestCookie, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling putAuSuspectUrlVersions(Async)");
    }

    // verify the required parameter 'auSuspectUrlVersions' is set
    if (auSuspectUrlVersions == null) {
      throw new ApiException(
        "Missing the required parameter 'auSuspectUrlVersions' when calling putAuSuspectUrlVersions(Async)");
    }

    okhttp3.Call localVarCall = putAuSuspectUrlVersionsCall(auid, auSuspectUrlVersions,
      xLockssRequestCookie, _callback);
    return localVarCall;

  }

  /**
   * Update the suspect URL versions of an AU
   * Update the suspect URL versions of an AU given the AU\\ \\ identifier
   *
   * @param auid                 The identifier of the AU for which the suspect URL\\ \\ versions are to be updated (required)
   * @param auSuspectUrlVersions The parts of the Archival Unit suspect URL versions to\\ \\ be updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public void putAuSuspectUrlVersions(String auid, Object auSuspectUrlVersions,
    String xLockssRequestCookie) throws ApiException {
    putAuSuspectUrlVersionsWithHttpInfo(auid, auSuspectUrlVersions, xLockssRequestCookie);
  }

  /**
   * Update the suspect URL versions of an AU
   * Update the suspect URL versions of an AU given the AU\\ \\ identifier
   *
   * @param auid                 The identifier of the AU for which the suspect URL\\ \\ versions are to be updated (required)
   * @param auSuspectUrlVersions The parts of the Archival Unit suspect URL versions to\\ \\ be updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Void> putAuSuspectUrlVersionsWithHttpInfo(String auid,
    Object auSuspectUrlVersions, String xLockssRequestCookie) throws ApiException {
    okhttp3.Call localVarCall = putAuSuspectUrlVersionsValidateBeforeCall(auid,
      auSuspectUrlVersions, xLockssRequestCookie, null);
    return apiClient.execute(localVarCall);
  }

  /**
   * Update the suspect URL versions of an AU (asynchronously)
   * Update the suspect URL versions of an AU given the AU\\ \\ identifier
   *
   * @param auid                 The identifier of the AU for which the suspect URL\\ \\ versions are to be updated (required)
   * @param auSuspectUrlVersions The parts of the Archival Unit suspect URL versions to\\ \\ be updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @param _callback            The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAuSuspectUrlVersionsAsync(String auid, Object auSuspectUrlVersions,
    String xLockssRequestCookie, final ApiCallback<Void> _callback) throws ApiException {

    okhttp3.Call localVarCall = putAuSuspectUrlVersionsValidateBeforeCall(auid,
      auSuspectUrlVersions, xLockssRequestCookie, _callback);
    apiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }

  /**
   * Build call for putAusDeactivate
   *
   * @param auIds     The identifiers of the Archival Units to be deactivated (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the deactivated AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAusDeactivateCall(List<String> auIds, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = auIds;

    // create path and map variables
    String localVarPath = "/aus/deactivate";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call putAusDeactivateValidateBeforeCall(List<String> auIds,
    final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'auIds' is set
    if (auIds == null) {
      throw new ApiException(
        "Missing the required parameter 'auIds' when calling putAusDeactivate(Async)");
    }

    okhttp3.Call localVarCall = putAusDeactivateCall(auIds, _callback);
    return localVarCall;

  }

  /**
   * Deactivate AUs
   * Deactivate a group of AUs given their identifiers
   *
   * @param auIds The identifiers of the Archival Units to be deactivated (required)
   * @return List&lt;ContentConfigurationResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the deactivated AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public List<ContentConfigurationResult> putAusDeactivate(List<String> auIds) throws ApiException {
    ApiResponse<List<ContentConfigurationResult>> localVarResp = putAusDeactivateWithHttpInfo(
      auIds);
    return localVarResp.getData();
  }

  /**
   * Deactivate AUs
   * Deactivate a group of AUs given their identifiers
   *
   * @param auIds The identifiers of the Archival Units to be deactivated (required)
   * @return ApiResponse&lt;List&lt;ContentConfigurationResult&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the deactivated AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<ContentConfigurationResult>> putAusDeactivateWithHttpInfo(
    List<String> auIds) throws ApiException {
    okhttp3.Call localVarCall = putAusDeactivateValidateBeforeCall(auIds, null);
    Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Deactivate AUs (asynchronously)
   * Deactivate a group of AUs given their identifiers
   *
   * @param auIds     The identifiers of the Archival Units to be deactivated (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the deactivated AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAusDeactivateAsync(List<String> auIds,
    final ApiCallback<List<ContentConfigurationResult>> _callback) throws ApiException {

    okhttp3.Call localVarCall = putAusDeactivateValidateBeforeCall(auIds, _callback);
    Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for putAusMdDisable
   *
   * @param auid      The identifier of the Archival Units for which metadata\\ \\ extraction is to be disabled (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the AU for which metadata extraction\\ \\ has been disabled </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAusMdDisableCall(String auid, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/aus/{auid}/mddisable"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call putAusMdDisableValidateBeforeCall(String auid, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling putAusMdDisable(Async)");
    }

    okhttp3.Call localVarCall = putAusMdDisableCall(auid, _callback);
    return localVarCall;

  }

  /**
   * Disable AU metadata extraction
   * Disable the metadata extraction for an AU given its\\ \\ identifier
   *
   * @param auid The identifier of the Archival Units for which metadata\\ \\ extraction is to be disabled (required)
   * @return RequestAuControlResult
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the AU for which metadata extraction\\ \\ has been disabled </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public RequestAuControlResult putAusMdDisable(String auid) throws ApiException {
    ApiResponse<RequestAuControlResult> localVarResp = putAusMdDisableWithHttpInfo(auid);
    return localVarResp.getData();
  }

  /**
   * Disable AU metadata extraction
   * Disable the metadata extraction for an AU given its\\ \\ identifier
   *
   * @param auid The identifier of the Archival Units for which metadata\\ \\ extraction is to be disabled (required)
   * @return ApiResponse&lt;RequestAuControlResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the AU for which metadata extraction\\ \\ has been disabled </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<RequestAuControlResult> putAusMdDisableWithHttpInfo(String auid)
    throws ApiException {
    okhttp3.Call localVarCall = putAusMdDisableValidateBeforeCall(auid, null);
    Type localVarReturnType = new TypeToken<RequestAuControlResult>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Disable AU metadata extraction (asynchronously)
   * Disable the metadata extraction for an AU given its\\ \\ identifier
   *
   * @param auid      The identifier of the Archival Units for which metadata\\ \\ extraction is to be disabled (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the AU for which metadata extraction\\ \\ has been disabled </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAusMdDisableAsync(String auid,
    final ApiCallback<RequestAuControlResult> _callback) throws ApiException {

    okhttp3.Call localVarCall = putAusMdDisableValidateBeforeCall(auid, _callback);
    Type localVarReturnType = new TypeToken<RequestAuControlResult>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for putAusMdEnable
   *
   * @param auid      The identifier of the Archival Units for which metadata\\ \\ extraction is to be enabled (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the AU for which metadata extraction\\ \\ has been enabled </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAusMdEnableCall(String auid, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/aus/{auid}/mdenable"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call putAusMdEnableValidateBeforeCall(String auid, final ApiCallback _callback)
    throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling putAusMdEnable(Async)");
    }

    okhttp3.Call localVarCall = putAusMdEnableCall(auid, _callback);
    return localVarCall;

  }

  /**
   * Enable AU metadata extraction
   * Enable the metadata extraction for an AU given its identifier
   *
   * @param auid The identifier of the Archival Units for which metadata\\ \\ extraction is to be enabled (required)
   * @return RequestAuControlResult
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the AU for which metadata extraction\\ \\ has been enabled </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public RequestAuControlResult putAusMdEnable(String auid) throws ApiException {
    ApiResponse<RequestAuControlResult> localVarResp = putAusMdEnableWithHttpInfo(auid);
    return localVarResp.getData();
  }

  /**
   * Enable AU metadata extraction
   * Enable the metadata extraction for an AU given its identifier
   *
   * @param auid The identifier of the Archival Units for which metadata\\ \\ extraction is to be enabled (required)
   * @return ApiResponse&lt;RequestAuControlResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the AU for which metadata extraction\\ \\ has been enabled </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<RequestAuControlResult> putAusMdEnableWithHttpInfo(String auid)
    throws ApiException {
    okhttp3.Call localVarCall = putAusMdEnableValidateBeforeCall(auid, null);
    Type localVarReturnType = new TypeToken<RequestAuControlResult>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Enable AU metadata extraction (asynchronously)
   * Enable the metadata extraction for an AU given its identifier
   *
   * @param auid      The identifier of the Archival Units for which metadata\\ \\ extraction is to be enabled (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the AU for which metadata extraction\\ \\ has been enabled </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAusMdEnableAsync(String auid,
    final ApiCallback<RequestAuControlResult> _callback) throws ApiException {

    okhttp3.Call localVarCall = putAusMdEnableValidateBeforeCall(auid, _callback);
    Type localVarReturnType = new TypeToken<RequestAuControlResult>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for putAusReactivate
   *
   * @param auIds     The identifiers of the Archival Units to be reactivated (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the reactivated AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAusReactivateCall(List<String> auIds, final ApiCallback _callback)
    throws ApiException {
    Object localVarPostBody = auIds;

    // create path and map variables
    String localVarPath = "/aus/reactivate";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call putAusReactivateValidateBeforeCall(List<String> auIds,
    final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'auIds' is set
    if (auIds == null) {
      throw new ApiException(
        "Missing the required parameter 'auIds' when calling putAusReactivate(Async)");
    }

    okhttp3.Call localVarCall = putAusReactivateCall(auIds, _callback);
    return localVarCall;

  }

  /**
   * Reactivate AUs
   * Reactivate a group of AUs given their identifiers
   *
   * @param auIds The identifiers of the Archival Units to be reactivated (required)
   * @return List&lt;ContentConfigurationResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the reactivated AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public List<ContentConfigurationResult> putAusReactivate(List<String> auIds) throws ApiException {
    ApiResponse<List<ContentConfigurationResult>> localVarResp = putAusReactivateWithHttpInfo(
      auIds);
    return localVarResp.getData();
  }

  /**
   * Reactivate AUs
   * Reactivate a group of AUs given their identifiers
   *
   * @param auIds The identifiers of the Archival Units to be reactivated (required)
   * @return ApiResponse&lt;List&lt;ContentConfigurationResult&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the reactivated AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<List<ContentConfigurationResult>> putAusReactivateWithHttpInfo(
    List<String> auIds) throws ApiException {
    okhttp3.Call localVarCall = putAusReactivateValidateBeforeCall(auIds, null);
    Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>() {
    }.getType();
    return apiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Reactivate AUs (asynchronously)
   * Reactivate a group of AUs given their identifiers
   *
   * @param auIds     The identifiers of the Archival Units to be reactivated (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Information about the reactivated AUs </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putAusReactivateAsync(List<String> auIds,
    final ApiCallback<List<ContentConfigurationResult>> _callback) throws ApiException {

    okhttp3.Call localVarCall = putAusReactivateValidateBeforeCall(auIds, _callback);
    Type localVarReturnType = new TypeToken<List<ContentConfigurationResult>>() {
    }.getType();
    apiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for putNoAuPeers
   *
   * @param auid                 The identifier of the AU for which the NoAuPeerSet\\ \\ object is to be updated (required)
   * @param noAuPeerSet          The parts of the Archival Unit NoAuPeerSet object to be\\ \\ updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @param _callback            Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putNoAuPeersCall(String auid, Object noAuPeerSet, String xLockssRequestCookie,
    final ApiCallback _callback) throws ApiException {
    Object localVarPostBody = noAuPeerSet;

    // create path and map variables
    String localVarPath = "/noaupeers/{auid}"
      .replaceAll("\\{" + "auid" + "\\}", apiClient.escapeString(auid));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (xLockssRequestCookie != null) {
      localVarHeaderParams.put("X-Lockss-Request-Cookie",
        apiClient.parameterToString(xLockssRequestCookie));
    }

    final String[] localVarAccepts = {

    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    String[] localVarAuthNames = new String[]{"basicAuth"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams,
      localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
      localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call putNoAuPeersValidateBeforeCall(String auid, Object noAuPeerSet,
    String xLockssRequestCookie, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'auid' is set
    if (auid == null) {
      throw new ApiException(
        "Missing the required parameter 'auid' when calling putNoAuPeers(Async)");
    }

    // verify the required parameter 'noAuPeerSet' is set
    if (noAuPeerSet == null) {
      throw new ApiException(
        "Missing the required parameter 'noAuPeerSet' when calling putNoAuPeers(Async)");
    }

    okhttp3.Call localVarCall = putNoAuPeersCall(auid, noAuPeerSet, xLockssRequestCookie,
      _callback);
    return localVarCall;

  }

  /**
   * Update the NoAuPeerSet object of an AU
   * Update the NoAuPeerSet object of an AU given the AU\\ \\ identifier
   *
   * @param auid                 The identifier of the AU for which the NoAuPeerSet\\ \\ object is to be updated (required)
   * @param noAuPeerSet          The parts of the Archival Unit NoAuPeerSet object to be\\ \\ updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public void putNoAuPeers(String auid, Object noAuPeerSet, String xLockssRequestCookie)
    throws ApiException {
    putNoAuPeersWithHttpInfo(auid, noAuPeerSet, xLockssRequestCookie);
  }

  /**
   * Update the NoAuPeerSet object of an AU
   * Update the NoAuPeerSet object of an AU given the AU\\ \\ identifier
   *
   * @param auid                 The identifier of the AU for which the NoAuPeerSet\\ \\ object is to be updated (required)
   * @param noAuPeerSet          The parts of the Archival Unit NoAuPeerSet object to be\\ \\ updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Void> putNoAuPeersWithHttpInfo(String auid, Object noAuPeerSet,
    String xLockssRequestCookie) throws ApiException {
    okhttp3.Call localVarCall = putNoAuPeersValidateBeforeCall(auid, noAuPeerSet,
      xLockssRequestCookie, null);
    return apiClient.execute(localVarCall);
  }

  /**
   * Update the NoAuPeerSet object of an AU (asynchronously)
   * Update the NoAuPeerSet object of an AU given the AU\\ \\ identifier
   *
   * @param auid                 The identifier of the AU for which the NoAuPeerSet\\ \\ object is to be updated (required)
   * @param noAuPeerSet          The parts of the Archival Unit NoAuPeerSet object to be\\ \\ updated (required)
   * @param xLockssRequestCookie The LOCKSS-specific request cookie header (optional)
   * @param _callback            The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
   * <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
   * <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call putNoAuPeersAsync(String auid, Object noAuPeerSet,
    String xLockssRequestCookie, final ApiCallback<Void> _callback) throws ApiException {

    okhttp3.Call localVarCall = putNoAuPeersValidateBeforeCall(auid, noAuPeerSet,
      xLockssRequestCookie, _callback);
    apiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }
}
