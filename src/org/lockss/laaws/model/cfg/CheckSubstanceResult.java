/*
 * LOCKSS Configuration Service REST API
 * REST API of the LOCKSS Configuration Service
 *
 * OpenAPI spec version: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.lockss.laaws.model.cfg;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The status of an archival unit
 */
@Schema(description = "The status of an archival unit")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-17T15:05:28.577-07:00[America/Los_Angeles]")
public class CheckSubstanceResult {
  @SerializedName("id")
  private String id = null;

  /**
   * An indication of whether the result is successful
   */
  @JsonAdapter(OldStateEnum.Adapter.class)
  public enum OldStateEnum {
    UNKNOWN("Unknown"),
    YES("Yes"),
    NO("No");

    private String value;

    OldStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OldStateEnum fromValue(String text) {
      for (OldStateEnum b : OldStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OldStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OldStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OldStateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OldStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("oldState")
  private OldStateEnum oldState = null;

  /**
   * An indication of whether the result is successful
   */
  @JsonAdapter(NewStateEnum.Adapter.class)
  public enum NewStateEnum {
    UNKNOWN("Unknown"),
    YES("Yes"),
    NO("No");

    private String value;

    NewStateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static NewStateEnum fromValue(String text) {
      for (NewStateEnum b : NewStateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<NewStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NewStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NewStateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return NewStateEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("newState")
  private NewStateEnum newState = null;

  @SerializedName("errorMessage")
  private String errorMessage = null;

  public CheckSubstanceResult id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The identifier of the archival unit
   * @return id
  **/
  @Schema(required = true, description = "The identifier of the archival unit")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CheckSubstanceResult oldState(OldStateEnum oldState) {
    this.oldState = oldState;
    return this;
  }

   /**
   * An indication of whether the result is successful
   * @return oldState
  **/
  @Schema(required = true, description = "An indication of whether the result is successful")
  public OldStateEnum getOldState() {
    return oldState;
  }

  public void setOldState(OldStateEnum oldState) {
    this.oldState = oldState;
  }

  public CheckSubstanceResult newState(NewStateEnum newState) {
    this.newState = newState;
    return this;
  }

   /**
   * An indication of whether the result is successful
   * @return newState
  **/
  @Schema(required = true, description = "An indication of whether the result is successful")
  public NewStateEnum getNewState() {
    return newState;
  }

  public void setNewState(NewStateEnum newState) {
    this.newState = newState;
  }

  public CheckSubstanceResult errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * The error message as a result of the operation
   * @return errorMessage
  **/
  @Schema(required = true, description = "The error message as a result of the operation")
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckSubstanceResult checkSubstanceResult = (CheckSubstanceResult) o;
    return Objects.equals(this.id, checkSubstanceResult.id) &&
        Objects.equals(this.oldState, checkSubstanceResult.oldState) &&
        Objects.equals(this.newState, checkSubstanceResult.newState) &&
        Objects.equals(this.errorMessage, checkSubstanceResult.errorMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, oldState, newState, errorMessage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckSubstanceResult {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    oldState: ").append(toIndentedString(oldState)).append("\n");
    sb.append("    newState: ").append(toIndentedString(newState)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
