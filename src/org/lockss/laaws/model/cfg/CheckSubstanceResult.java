/*
 * Copyright (c) 2000-2022, Board of Trustees of Leland Stanford Jr. University
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * LOCKSS Configuration Service REST API
 * REST API of the LOCKSS Configuration Service
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.lockss.laaws.model.cfg;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;
import java.util.Objects;

/**
 * The status of an archival unit
 */
@ApiModel(description = "The status of an archival unit")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CheckSubstanceResult implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID) private String id;

  /**
   * An indication of whether the result is successful
   */
  @JsonAdapter(OldStateEnum.Adapter.class)
  public enum OldStateEnum {
    UNKNOWN("Unknown"),

    YES("Yes"),

    NO("No");

    private String value;

    OldStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OldStateEnum fromValue(String value) {
      for (OldStateEnum b : OldStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OldStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OldStateEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OldStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OldStateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OLD_STATE = "oldState";
  @SerializedName(SERIALIZED_NAME_OLD_STATE) private OldStateEnum oldState;

  /**
   * An indication of whether the result is successful
   */
  @JsonAdapter(NewStateEnum.Adapter.class)
  public enum NewStateEnum {
    UNKNOWN("Unknown"),

    YES("Yes"),

    NO("No");

    private String value;

    NewStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NewStateEnum fromValue(String value) {
      for (NewStateEnum b : NewStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NewStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NewStateEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NewStateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NewStateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NEW_STATE = "newState";
  @SerializedName(SERIALIZED_NAME_NEW_STATE) private NewStateEnum newState;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE) private String errorMessage;

  public CheckSubstanceResult() {}

  public CheckSubstanceResult id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier of the archival unit
   * @return id
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The identifier of the archival unit")

  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public CheckSubstanceResult oldState(OldStateEnum oldState) {
    this.oldState = oldState;
    return this;
  }

  /**
   * An indication of whether the result is successful
   * @return oldState
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An indication of whether the result is successful")

  public OldStateEnum getOldState() {
    return oldState;
  }

  public void setOldState(OldStateEnum oldState) {
    this.oldState = oldState;
  }

  public CheckSubstanceResult newState(NewStateEnum newState) {
    this.newState = newState;
    return this;
  }

  /**
   * An indication of whether the result is successful
   * @return newState
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An indication of whether the result is successful")

  public NewStateEnum getNewState() {
    return newState;
  }

  public void setNewState(NewStateEnum newState) {
    this.newState = newState;
  }

  public CheckSubstanceResult errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * The error message as a result of the operation
   * @return errorMessage
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The error message as a result of the operation")

  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckSubstanceResult checkSubstanceResult = (CheckSubstanceResult) o;
    return Objects.equals(this.id, checkSubstanceResult.id)
        && Objects.equals(this.oldState, checkSubstanceResult.oldState)
        && Objects.equals(this.newState, checkSubstanceResult.newState)
        && Objects.equals(this.errorMessage, checkSubstanceResult.errorMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, oldState, newState, errorMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckSubstanceResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    oldState: ").append(toIndentedString(oldState)).append("\n");
    sb.append("    newState: ").append(toIndentedString(newState)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
