/*
 * LOCKSS Configuration Service REST API
 * REST API of the LOCKSS Configuration Service
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.lockss.laaws.model.cfg;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import java.util.Objects;

/**
 * The status information of the service
 */
@ApiModel(description = "The status information of the service")
public class ApiStatus {

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_READY = "ready";
  @SerializedName(SERIALIZED_NAME_READY)
  private Boolean ready;


  public ApiStatus version(String version) {

    this.version = version;
    return this;
  }

  /**
   * The version of the service
   *
   * @return version
   **/
  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public ApiStatus ready(Boolean ready) {

    this.ready = ready;
    return this;
  }

  /**
   * The indication of whether the service is available
   *
   * @return ready
   **/

  public Boolean getReady() {
    return ready;
  }


  public void setReady(Boolean ready) {
    this.ready = ready;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiStatus apiStatus = (ApiStatus) o;
    return Objects.equals(this.version, apiStatus.version) &&
      Objects.equals(this.ready, apiStatus.ready);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, ready);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiStatus {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    ready: ").append(toIndentedString(ready)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

