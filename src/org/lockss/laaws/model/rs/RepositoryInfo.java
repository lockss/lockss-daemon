/*
 * Copyright (c) 2000-2022, Board of Trustees of Leland Stanford Jr. University
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
*/

/*
 * LOCKSS Repository Service REST API
 * REST API of the LOCKSS Repository Service
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.lockss.laaws.model.rs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;
import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.lockss.laaws.client.JSON;
import org.lockss.laaws.model.rs.StorageInfo;

/**
 * Information about the repository
 */
@ApiModel(description = "Information about the repository")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RepositoryInfo implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_STORE_INFO = "storeInfo";
  @SerializedName(SERIALIZED_NAME_STORE_INFO) private StorageInfo storeInfo;

  public static final String SERIALIZED_NAME_INDEX_INFO = "indexInfo";
  @SerializedName(SERIALIZED_NAME_INDEX_INFO) private StorageInfo indexInfo;

  public RepositoryInfo() {}

  public RepositoryInfo storeInfo(StorageInfo storeInfo) {
    this.storeInfo = storeInfo;
    return this;
  }

  /**
   * Get storeInfo
   * @return storeInfo
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StorageInfo getStoreInfo() {
    return storeInfo;
  }

  public void setStoreInfo(StorageInfo storeInfo) {
    this.storeInfo = storeInfo;
  }

  public RepositoryInfo indexInfo(StorageInfo indexInfo) {
    this.indexInfo = indexInfo;
    return this;
  }

  /**
   * Get indexInfo
   * @return indexInfo
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StorageInfo getIndexInfo() {
    return indexInfo;
  }

  public void setIndexInfo(StorageInfo indexInfo) {
    this.indexInfo = indexInfo;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryInfo repositoryInfo = (RepositoryInfo) o;
    return Objects.equals(this.storeInfo, repositoryInfo.storeInfo)
        && Objects.equals(this.indexInfo, repositoryInfo.indexInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storeInfo, indexInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryInfo {\n");
    sb.append("    storeInfo: ").append(toIndentedString(storeInfo)).append("\n");
    sb.append("    indexInfo: ").append(toIndentedString(indexInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("storeInfo");
    openapiFields.add("indexInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("storeInfo");
    openapiRequiredFields.add("indexInfo");
  }

  /**
   * Validates the JSON Object and throws an exception if issues found
   *
   * @param jsonObj JSON Object
   * @throws IOException if the JSON Object is invalid with respect to RepositoryInfo
   */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    if (jsonObj == null) {
      if (RepositoryInfo.openapiRequiredFields.isEmpty()) {
        return;
      } else { // has required fields
        throw new IllegalArgumentException(String.format(
            "The required field(s) %s in RepositoryInfo is not found in the empty JSON string",
            RepositoryInfo.openapiRequiredFields.toString()));
      }
    }

    Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
    // check to see if the JSON string contains additional fields
    for (Entry<String, JsonElement> entry : entries) {
      if (!RepositoryInfo.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format(
            "The field `%s` in the JSON string is not defined in the `RepositoryInfo` properties. JSON: %s",
            entry.getKey(), jsonObj.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : RepositoryInfo.openapiRequiredFields) {
      if (jsonObj.get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format("The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonObj.toString()));
      }
    }
    // validate the optional field `storeInfo`
    if (jsonObj.get("storeInfo") != null && !jsonObj.get("storeInfo").isJsonNull()) {
      StorageInfo.validateJsonObject(jsonObj.getAsJsonObject("storeInfo"));
    }
    // validate the optional field `indexInfo`
    if (jsonObj.get("indexInfo") != null && !jsonObj.get("indexInfo").isJsonNull()) {
      StorageInfo.validateJsonObject(jsonObj.getAsJsonObject("indexInfo"));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!RepositoryInfo.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'RepositoryInfo' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<RepositoryInfo> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(RepositoryInfo.class));

      return (TypeAdapter<T>) new TypeAdapter<RepositoryInfo>() {
        @Override
        public void write(JsonWriter out, RepositoryInfo value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }

        @Override
        public RepositoryInfo read(JsonReader in) throws IOException {
          JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
          validateJsonObject(jsonObj);
          return thisAdapter.fromJsonTree(jsonObj);
        }
      }.nullSafe();
    }
  }

  /**
   * Create an instance of RepositoryInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepositoryInfo
   * @throws IOException if the JSON string is invalid with respect to RepositoryInfo
   */
  public static RepositoryInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepositoryInfo.class);
  }

  /**
   * Convert an instance of RepositoryInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
