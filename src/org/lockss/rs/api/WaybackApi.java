/*
 * LOCKSS Repository Service REST API
 * REST API of the LOCKSS Repository Service
 *
 * OpenAPI spec version: 2.0.0
 * Contact: lockss-support@lockss.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.lockss.rs.api;

import org.lockss.rs.client.ApiCallback;
import org.lockss.rs.client.ApiClient;
import org.lockss.rs.client.ApiException;
import org.lockss.rs.client.ApiResponse;
import org.lockss.rs.client.Configuration;
import org.lockss.rs.client.Pair;
import org.lockss.rs.client.ProgressRequestBody;
import org.lockss.rs.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WaybackApi {
    private ApiClient apiClient;

    public WaybackApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WaybackApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCdxOwb
     * @param collectionid Identifier of the collection (required)
     * @param q Query string. Supported fields are url, type\\ \\ (urlquery/prefixquery), offset and limit. (optional)
     * @param count . (optional)
     * @param startPage . (optional)
     * @param accept The Accept header (optional)
     * @param acceptEncoding The Accept-Encoding header (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCdxOwbCall(String collectionid, String q, Integer count, Integer startPage, String accept, String acceptEncoding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cdx/owb/{collectionid}"
            .replaceAll("\\{" + "collectionid" + "\\}", apiClient.escapeString(collectionid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (startPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start_page", startPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptEncoding != null)
        localVarHeaderParams.put("Accept-Encoding", apiClient.parameterToString(acceptEncoding));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCdxOwbValidateBeforeCall(String collectionid, String q, Integer count, Integer startPage, String accept, String acceptEncoding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'collectionid' is set
        if (collectionid == null) {
            throw new ApiException("Missing the required parameter 'collectionid' when calling getCdxOwb(Async)");
        }
        
        com.squareup.okhttp.Call call = getCdxOwbCall(collectionid, q, count, startPage, accept, acceptEncoding, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get OpenWayback CDX records
     * Get the OpenWayback CDX records of a URL in a collection
     * @param collectionid Identifier of the collection (required)
     * @param q Query string. Supported fields are url, type\\ \\ (urlquery/prefixquery), offset and limit. (optional)
     * @param count . (optional)
     * @param startPage . (optional)
     * @param accept The Accept header (optional)
     * @param acceptEncoding The Accept-Encoding header (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getCdxOwb(String collectionid, String q, Integer count, Integer startPage, String accept, String acceptEncoding) throws ApiException {
        ApiResponse<String> resp = getCdxOwbWithHttpInfo(collectionid, q, count, startPage, accept, acceptEncoding);
        return resp.getData();
    }

    /**
     * Get OpenWayback CDX records
     * Get the OpenWayback CDX records of a URL in a collection
     * @param collectionid Identifier of the collection (required)
     * @param q Query string. Supported fields are url, type\\ \\ (urlquery/prefixquery), offset and limit. (optional)
     * @param count . (optional)
     * @param startPage . (optional)
     * @param accept The Accept header (optional)
     * @param acceptEncoding The Accept-Encoding header (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getCdxOwbWithHttpInfo(String collectionid, String q, Integer count, Integer startPage, String accept, String acceptEncoding) throws ApiException {
        com.squareup.okhttp.Call call = getCdxOwbValidateBeforeCall(collectionid, q, count, startPage, accept, acceptEncoding, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get OpenWayback CDX records (asynchronously)
     * Get the OpenWayback CDX records of a URL in a collection
     * @param collectionid Identifier of the collection (required)
     * @param q Query string. Supported fields are url, type\\ \\ (urlquery/prefixquery), offset and limit. (optional)
     * @param count . (optional)
     * @param startPage . (optional)
     * @param accept The Accept header (optional)
     * @param acceptEncoding The Accept-Encoding header (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCdxOwbAsync(String collectionid, String q, Integer count, Integer startPage, String accept, String acceptEncoding, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCdxOwbValidateBeforeCall(collectionid, q, count, startPage, accept, acceptEncoding, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCdxPywb
     * @param collectionid Identifier of the collection (required)
     * @param url The URL for which the CDX records are requested (optional)
     * @param limit . (optional)
     * @param matchType  (optional)
     * @param sort  (optional)
     * @param closest Timestamp for sort&#x3D;closest mode (optional)
     * @param output Output format (optional)
     * @param fl Comma-separated list of fields to include in output (optional)
     * @param accept The Accept header (optional)
     * @param acceptEncoding The Accept-Encoding header (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCdxPywbCall(String collectionid, String url, Integer limit, String matchType, String sort, String closest, String output, String fl, String accept, String acceptEncoding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cdx/pywb/{collectionid}"
            .replaceAll("\\{" + "collectionid" + "\\}", apiClient.escapeString(collectionid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("url", url));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (matchType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("matchType", matchType));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (closest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("closest", closest));
        if (output != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("output", output));
        if (fl != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fl", fl));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptEncoding != null)
        localVarHeaderParams.put("Accept-Encoding", apiClient.parameterToString(acceptEncoding));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCdxPywbValidateBeforeCall(String collectionid, String url, Integer limit, String matchType, String sort, String closest, String output, String fl, String accept, String acceptEncoding, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'collectionid' is set
        if (collectionid == null) {
            throw new ApiException("Missing the required parameter 'collectionid' when calling getCdxPywb(Async)");
        }
        
        com.squareup.okhttp.Call call = getCdxPywbCall(collectionid, url, limit, matchType, sort, closest, output, fl, accept, acceptEncoding, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get PyWayback CDX records
     * Get the PyWayback CDX records of a URL in a collection
     * @param collectionid Identifier of the collection (required)
     * @param url The URL for which the CDX records are requested (optional)
     * @param limit . (optional)
     * @param matchType  (optional)
     * @param sort  (optional)
     * @param closest Timestamp for sort&#x3D;closest mode (optional)
     * @param output Output format (optional)
     * @param fl Comma-separated list of fields to include in output (optional)
     * @param accept The Accept header (optional)
     * @param acceptEncoding The Accept-Encoding header (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getCdxPywb(String collectionid, String url, Integer limit, String matchType, String sort, String closest, String output, String fl, String accept, String acceptEncoding) throws ApiException {
        ApiResponse<String> resp = getCdxPywbWithHttpInfo(collectionid, url, limit, matchType, sort, closest, output, fl, accept, acceptEncoding);
        return resp.getData();
    }

    /**
     * Get PyWayback CDX records
     * Get the PyWayback CDX records of a URL in a collection
     * @param collectionid Identifier of the collection (required)
     * @param url The URL for which the CDX records are requested (optional)
     * @param limit . (optional)
     * @param matchType  (optional)
     * @param sort  (optional)
     * @param closest Timestamp for sort&#x3D;closest mode (optional)
     * @param output Output format (optional)
     * @param fl Comma-separated list of fields to include in output (optional)
     * @param accept The Accept header (optional)
     * @param acceptEncoding The Accept-Encoding header (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getCdxPywbWithHttpInfo(String collectionid, String url, Integer limit, String matchType, String sort, String closest, String output, String fl, String accept, String acceptEncoding) throws ApiException {
        com.squareup.okhttp.Call call = getCdxPywbValidateBeforeCall(collectionid, url, limit, matchType, sort, closest, output, fl, accept, acceptEncoding, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get PyWayback CDX records (asynchronously)
     * Get the PyWayback CDX records of a URL in a collection
     * @param collectionid Identifier of the collection (required)
     * @param url The URL for which the CDX records are requested (optional)
     * @param limit . (optional)
     * @param matchType  (optional)
     * @param sort  (optional)
     * @param closest Timestamp for sort&#x3D;closest mode (optional)
     * @param output Output format (optional)
     * @param fl Comma-separated list of fields to include in output (optional)
     * @param accept The Accept header (optional)
     * @param acceptEncoding The Accept-Encoding header (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCdxPywbAsync(String collectionid, String url, Integer limit, String matchType, String sort, String closest, String output, String fl, String accept, String acceptEncoding, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCdxPywbValidateBeforeCall(collectionid, url, limit, matchType, sort, closest, output, fl, accept, acceptEncoding, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWarcArchive
     * @param fileName Name of the WARC archive (required)
     * @param accept The Accept header (optional)
     * @param acceptEncoding The Accept-Encoding header (optional)
     * @param range The Range header (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWarcArchiveCall(String fileName, String accept, String acceptEncoding, String range, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/warcs/{fileName}"
            .replaceAll("\\{" + "fileName" + "\\}", apiClient.escapeString(fileName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));
        if (acceptEncoding != null)
        localVarHeaderParams.put("Accept-Encoding", apiClient.parameterToString(acceptEncoding));
        if (range != null)
        localVarHeaderParams.put("Range", apiClient.parameterToString(range));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/warc"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWarcArchiveValidateBeforeCall(String fileName, String accept, String acceptEncoding, String range, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'fileName' is set
        if (fileName == null) {
            throw new ApiException("Missing the required parameter 'fileName' when calling getWarcArchive(Async)");
        }
        
        com.squareup.okhttp.Call call = getWarcArchiveCall(fileName, accept, acceptEncoding, range, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a WARC archive
     * Get the contents of a single WARC record as a WARC archive
     * @param fileName Name of the WARC archive (required)
     * @param accept The Accept header (optional)
     * @param acceptEncoding The Accept-Encoding header (optional)
     * @param range The Range header (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getWarcArchive(String fileName, String accept, String acceptEncoding, String range) throws ApiException {
        ApiResponse<File> resp = getWarcArchiveWithHttpInfo(fileName, accept, acceptEncoding, range);
        return resp.getData();
    }

    /**
     * Get a WARC archive
     * Get the contents of a single WARC record as a WARC archive
     * @param fileName Name of the WARC archive (required)
     * @param accept The Accept header (optional)
     * @param acceptEncoding The Accept-Encoding header (optional)
     * @param range The Range header (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getWarcArchiveWithHttpInfo(String fileName, String accept, String acceptEncoding, String range) throws ApiException {
        com.squareup.okhttp.Call call = getWarcArchiveValidateBeforeCall(fileName, accept, acceptEncoding, range, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a WARC archive (asynchronously)
     * Get the contents of a single WARC record as a WARC archive
     * @param fileName Name of the WARC archive (required)
     * @param accept The Accept header (optional)
     * @param acceptEncoding The Accept-Encoding header (optional)
     * @param range The Range header (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWarcArchiveAsync(String fileName, String accept, String acceptEncoding, String range, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWarcArchiveValidateBeforeCall(fileName, accept, acceptEncoding, range, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
